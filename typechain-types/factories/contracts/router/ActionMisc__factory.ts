/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ActionMisc,
  ActionMiscInterface,
} from "../../../contracts/router/ActionMisc";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
        ],
        internalType: "struct IPActionMisc.MultiApproval[]",
        name: "arr",
        type: "tuple[]",
      },
    ],
    name: "approveInf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct IPActionMisc.Call3[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "batchExec",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct IPActionMisc.Result[]",
        name: "res",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506108da806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063acdb32df1461003b578063d617b03b14610050575b600080fd5b61004e610049366004610578565b610079565b005b61006361005e366004610578565b61011f565b60405161007091906105de565b60405180910390f35b60005b8181101561011a5736838383818110610097576100976106ad565b90506020028101906100a991906106c3565b905060005b6100b88280610701565b9050811015610110576101086100ce8380610701565b838181106100de576100de6106ad565b90506020020160208101906100f3919061074b565b610103604085016020860161074b565b610299565b6001016100ae565b505060010161007c565b505050565b6060818067ffffffffffffffff81111561013b5761013b610788565b60405190808252806020026020018201604052801561018157816020015b6040805180820190915260008152606060208201528152602001906001900390816101595790505b5091503660005b82811015610290578585828181106101a2576101a26106ad565b90506020028101906101b491906106c3565b9150600080306101c7602086018661079e565b6040516101d59291906107e5565b600060405180830381855af49150503d8060008114610210576040519150601f19603f3d011682016040523d82523d6000602084013e610215565b606091505b50915091508115801561023257506102306020850185610806565b155b1561023f57805181602001fd5b81868481518110610252576102526106ad565b6020908102919091010151901515905285518190879085908110610278576102786106ad565b60209081029190910181015101525050600101610188565b50505092915050565b73ffffffffffffffffffffffffffffffffffffffff82166102b8575050565b6102cf60026bffffffffffffffffffffffff610823565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526bffffffffffffffffffffffff929092169184169063dd62ed3e90604401602060405180830381865afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610377919061085c565b10156103b457610389828260006103b8565b6103b482827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6103b8565b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052915160009283929087169161044f9190610875565b6000604051808303816000865af19150503d806000811461048c576040519150601f19603f3d011682016040523d82523d6000602084013e610491565b606091505b50915091508180156104bb5750805115806104bb5750808060200190518101906104bb9190610887565b610525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5361666520417070726f76650000000000000000000000000000000000000000604482015260640160405180910390fd5b5050505050565b60008083601f84011261053e57600080fd5b50813567ffffffffffffffff81111561055657600080fd5b6020830191508360208260051b850101111561057157600080fd5b9250929050565b6000806020838503121561058b57600080fd5b823567ffffffffffffffff8111156105a257600080fd5b6105ae8582860161052c565b90969095509350505050565b60005b838110156105d55781810151838201526020016105bd565b50506000910152565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561069f578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc001855281518051151584528701518784018790528051878501819052606061065e82828801858d016105ba565b96890196601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01694909401909301925090860190600101610605565b509098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126106f757600080fd5b9190910192915050565b6000808335601e1984360301811261071857600080fd5b83018035915067ffffffffffffffff82111561073357600080fd5b6020019150600581901b360382131561057157600080fd5b60006020828403121561075d57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461078157600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000808335601e198436030181126107b557600080fd5b83018035915067ffffffffffffffff8211156107d057600080fd5b60200191503681900382131561057157600080fd5b8183823760009101908152919050565b801515811461080357600080fd5b50565b60006020828403121561081857600080fd5b8135610781816107f5565b60006bffffffffffffffffffffffff8084168061085057634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006020828403121561086e57600080fd5b5051919050565b600082516106f78184602087016105ba565b60006020828403121561089957600080fd5b8151610781816107f556fea2646970667358221220c90efa97e438b3290b5a8aad8878fdf000ad3515ad19f457888e2c39ecbf149964736f6c63430008110033";

type ActionMiscConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ActionMiscConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ActionMisc__factory extends ContractFactory {
  constructor(...args: ActionMiscConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ActionMisc & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ActionMisc__factory {
    return super.connect(runner) as ActionMisc__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ActionMiscInterface {
    return new Interface(_abi) as ActionMiscInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ActionMisc {
    return new Contract(address, _abi, runner) as unknown as ActionMisc;
  }
}
