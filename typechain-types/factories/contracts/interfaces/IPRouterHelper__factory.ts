/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPRouterHelper,
  IPRouterHelperInterface,
} from "../../../contracts/interfaces/IPRouterHelper";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netSyIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netLpOut",
        type: "uint256",
      },
    ],
    name: "AddLiquiditySingleSy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netSyIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netLpOut",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netYtOut",
        type: "uint256",
      },
    ],
    name: "AddLiquiditySingleSyKeepYt",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netTokenIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netLpOut",
        type: "uint256",
      },
    ],
    name: "AddLiquiditySingleToken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netTokenIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netLpOut",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netYtOut",
        type: "uint256",
      },
    ],
    name: "AddLiquiditySingleTokenKeepYt",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netLpToRemove",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netSyOut",
        type: "uint256",
      },
    ],
    name: "RemoveLiquiditySingleSy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netLpToRemove",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netTokenOut",
        type: "uint256",
      },
    ],
    name: "RemoveLiquiditySingleToken",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "market",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "netLpToRemove",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "doRedeemRewards",
            type: "bool",
          },
        ],
        internalType: "struct IPRouterHelper.RemoveLiquiditySingleSyStruct",
        name: "fromMarket",
        type: "tuple",
      },
    ],
    name: "removeLiquiditySingleSy",
    outputs: [
      {
        internalType: "uint256",
        name: "netSyOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netSyFee",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "market",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "netLpToRemove",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "doRedeemRewards",
            type: "bool",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenOut",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "minTokenOut",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "tokenRedeemSy",
                type: "address",
              },
              {
                internalType: "address",
                name: "bulk",
                type: "address",
              },
              {
                internalType: "address",
                name: "euphratesSwap",
                type: "address",
              },
              {
                components: [
                  {
                    internalType: "enum SwapType",
                    name: "swapType",
                    type: "uint8",
                  },
                  {
                    internalType: "address",
                    name: "extRouter",
                    type: "address",
                  },
                  {
                    internalType: "bytes",
                    name: "extCalldata",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "needScale",
                    type: "bool",
                  },
                ],
                internalType: "struct SwapData",
                name: "swapData",
                type: "tuple",
              },
            ],
            internalType: "struct TokenOutput",
            name: "output",
            type: "tuple",
          },
        ],
        internalType: "struct IPRouterHelper.RemoveLiquiditySingleTokenStruct",
        name: "fromMarket",
        type: "tuple",
      },
    ],
    name: "removeLiquiditySingleToken",
    outputs: [
      {
        internalType: "uint256",
        name: "netTokenOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netSyFee",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "market",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "netLpToRemove",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "doRedeemRewards",
            type: "bool",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenOut",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "minTokenOut",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "tokenRedeemSy",
                type: "address",
              },
              {
                internalType: "address",
                name: "bulk",
                type: "address",
              },
              {
                internalType: "address",
                name: "euphratesSwap",
                type: "address",
              },
              {
                components: [
                  {
                    internalType: "enum SwapType",
                    name: "swapType",
                    type: "uint8",
                  },
                  {
                    internalType: "address",
                    name: "extRouter",
                    type: "address",
                  },
                  {
                    internalType: "bytes",
                    name: "extCalldata",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "needScale",
                    type: "bool",
                  },
                ],
                internalType: "struct SwapData",
                name: "swapData",
                type: "tuple",
              },
            ],
            internalType: "struct TokenOutput",
            name: "output",
            type: "tuple",
          },
        ],
        internalType: "struct IPRouterHelper.RemoveLiquiditySingleTokenStruct",
        name: "fromMarket",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "market",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minLpOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minYtOut",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "bulk",
            type: "address",
          },
        ],
        internalType:
          "struct IPRouterHelper.AddLiquiditySingleTokenKeepYtStruct",
        name: "toMarket",
        type: "tuple",
      },
    ],
    name: "transferLiquidityDifferentSyKeepYt",
    outputs: [
      {
        internalType: "uint256",
        name: "netLpOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netYtOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netTokenZapIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netSyFeeOfRemove",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "market",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "netLpToRemove",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "doRedeemRewards",
            type: "bool",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenOut",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "minTokenOut",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "tokenRedeemSy",
                type: "address",
              },
              {
                internalType: "address",
                name: "bulk",
                type: "address",
              },
              {
                internalType: "address",
                name: "euphratesSwap",
                type: "address",
              },
              {
                components: [
                  {
                    internalType: "enum SwapType",
                    name: "swapType",
                    type: "uint8",
                  },
                  {
                    internalType: "address",
                    name: "extRouter",
                    type: "address",
                  },
                  {
                    internalType: "bytes",
                    name: "extCalldata",
                    type: "bytes",
                  },
                  {
                    internalType: "bool",
                    name: "needScale",
                    type: "bool",
                  },
                ],
                internalType: "struct SwapData",
                name: "swapData",
                type: "tuple",
              },
            ],
            internalType: "struct TokenOutput",
            name: "output",
            type: "tuple",
          },
        ],
        internalType: "struct IPRouterHelper.RemoveLiquiditySingleTokenStruct",
        name: "fromMarket",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "market",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minLpOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "guessNetTokenIn",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "guessMin",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "guessMax",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "guessOffchain",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxIteration",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "eps",
                type: "uint256",
              },
            ],
            internalType: "struct ApproxParams",
            name: "guessPtReceivedFromSy",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "bulk",
            type: "address",
          },
        ],
        internalType: "struct IPRouterHelper.AddLiquiditySingleTokenStruct",
        name: "toMarket",
        type: "tuple",
      },
    ],
    name: "transferLiquidityDifferentSyNormal",
    outputs: [
      {
        internalType: "uint256",
        name: "netLpOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netTokenZapIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netSyFeeOfRemove",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netSyFeeOfAdd",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "market",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "netLpToRemove",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "doRedeemRewards",
            type: "bool",
          },
        ],
        internalType: "struct IPRouterHelper.RemoveLiquiditySingleSyStruct",
        name: "fromMarket",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "market",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minLpOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minYtOut",
            type: "uint256",
          },
        ],
        internalType: "struct IPRouterHelper.AddLiquiditySingleSyKeepYtStruct",
        name: "toMarket",
        type: "tuple",
      },
    ],
    name: "transferLiquiditySameSyKeepYt",
    outputs: [
      {
        internalType: "uint256",
        name: "netLpOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netYtOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netSyZapIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netSyFeeOfRemove",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "market",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "netLpToRemove",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "doRedeemRewards",
            type: "bool",
          },
        ],
        internalType: "struct IPRouterHelper.RemoveLiquiditySingleSyStruct",
        name: "fromMarket",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "market",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minLpOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "guessNetSyIn",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "guessMin",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "guessMax",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "guessOffchain",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxIteration",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "eps",
                type: "uint256",
              },
            ],
            internalType: "struct ApproxParams",
            name: "guessPtReceivedFromSy",
            type: "tuple",
          },
        ],
        internalType: "struct IPRouterHelper.AddLiquiditySingleSyStruct",
        name: "toMarket",
        type: "tuple",
      },
    ],
    name: "transferLiquiditySameSyNormal",
    outputs: [
      {
        internalType: "uint256",
        name: "netLpOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netSyZapIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netSyFeeOfRemove",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "netSyFeeOfAdd",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IPRouterHelper__factory {
  static readonly abi = _abi;
  static createInterface(): IPRouterHelperInterface {
    return new Interface(_abi) as IPRouterHelperInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IPRouterHelper {
    return new Contract(address, _abi, runner) as unknown as IPRouterHelper;
  }
}
