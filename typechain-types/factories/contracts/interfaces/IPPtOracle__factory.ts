/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPPtOracle,
  IPPtOracleInterface,
} from "../../../contracts/interfaces/IPPtOracle";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint16",
        name: "newBlockCycleNumerator",
        type: "uint16",
      },
    ],
    name: "SetBlockCycleNumerator",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "duration",
        type: "uint32",
      },
    ],
    name: "getOracleState",
    outputs: [
      {
        internalType: "bool",
        name: "increaseCardinalityRequired",
        type: "bool",
      },
      {
        internalType: "uint16",
        name: "cardinalityRequired",
        type: "uint16",
      },
      {
        internalType: "bool",
        name: "oldestObservationSatisfied",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "duration",
        type: "uint32",
      },
    ],
    name: "getPtToAssetRate",
    outputs: [
      {
        internalType: "uint256",
        name: "ptToAssetRate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IPPtOracle__factory {
  static readonly abi = _abi;
  static createInterface(): IPPtOracleInterface {
    return new Interface(_abi) as IPPtOracleInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IPPtOracle {
    return new Contract(address, _abi, runner) as unknown as IPPtOracle;
  }
}
