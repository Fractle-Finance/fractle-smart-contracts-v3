/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPMarketFactoryV2,
  IPMarketFactoryV2Interface,
} from "../../../contracts/interfaces/IPMarketFactoryV2";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "PT",
        type: "address",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "scalarRoot",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "initialAnchor",
        type: "int256",
      },
    ],
    name: "CreateNewMarket",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "treasury",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint80",
        name: "defaultLnFeeRateRoot",
        type: "uint80",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "reserveFeePercent",
        type: "uint8",
      },
    ],
    name: "NewMarketConfig",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint80",
        name: "lnFeeRateRoot",
        type: "uint80",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "reserveFeePercent",
        type: "uint8",
      },
    ],
    name: "SetOverriddenFee",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    name: "UnsetOverriddenFee",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    name: "getMarketConfig",
    outputs: [
      {
        internalType: "address",
        name: "treasury",
        type: "address",
      },
      {
        internalType: "uint80",
        name: "lnFeeRateRoot",
        type: "uint80",
      },
      {
        internalType: "uint8",
        name: "reserveFeePercent",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "isValidMarket",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardDistributor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IPMarketFactoryV2__factory {
  static readonly abi = _abi;
  static createInterface(): IPMarketFactoryV2Interface {
    return new Interface(_abi) as IPMarketFactoryV2Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IPMarketFactoryV2 {
    return new Contract(address, _abi, runner) as unknown as IPMarketFactoryV2;
  }
}
