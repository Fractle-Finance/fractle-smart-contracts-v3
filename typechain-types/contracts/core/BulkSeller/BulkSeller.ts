/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type BulkSellerStateStruct = {
  rateTokenToSy: BigNumberish;
  rateSyToToken: BigNumberish;
  totalToken: BigNumberish;
  totalSy: BigNumberish;
  feeRate: BigNumberish;
};

export type BulkSellerStateStructOutput = [
  rateTokenToSy: bigint,
  rateSyToToken: bigint,
  totalToken: bigint,
  totalSy: bigint,
  feeRate: bigint
] & {
  rateTokenToSy: bigint;
  rateSyToToken: bigint;
  totalToken: bigint;
  totalSy: bigint;
  feeRate: bigint;
};

export interface BulkSellerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "SY"
      | "_storage"
      | "decreaseReserve"
      | "factory"
      | "feeRate"
      | "increaseReserve"
      | "initialize"
      | "reBalance"
      | "readState"
      | "redeemRewards"
      | "setFeeRate"
      | "setRate"
      | "skim"
      | "swapExactSyForToken"
      | "swapExactTokenForSy"
      | "token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeRateUpdated"
      | "Initialized"
      | "RateUpdated"
      | "ReBalanceSyToToken"
      | "ReBalanceTokenToSy"
      | "ReserveUpdated"
      | "SwapExactSyForToken"
      | "SwapExactTokenForSy"
  ): EventFragment;

  encodeFunctionData(functionFragment: "SY", values?: undefined): string;
  encodeFunctionData(functionFragment: "_storage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseReserve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseReserve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reBalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "readState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "skim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForToken",
    values: [AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForSy",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "SY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_storage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace FeeRateUpdatedEvent {
  export type InputTuple = [newFeeRate: BigNumberish, oldFeeRate: BigNumberish];
  export type OutputTuple = [newFeeRate: bigint, oldFeeRate: bigint];
  export interface OutputObject {
    newFeeRate: bigint;
    oldFeeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RateUpdatedEvent {
  export type InputTuple = [
    newRateTokenToSy: BigNumberish,
    newRateSyToToken: BigNumberish,
    oldRateTokenToSy: BigNumberish,
    oldRateSyToToken: BigNumberish
  ];
  export type OutputTuple = [
    newRateTokenToSy: bigint,
    newRateSyToToken: bigint,
    oldRateTokenToSy: bigint,
    oldRateSyToToken: bigint
  ];
  export interface OutputObject {
    newRateTokenToSy: bigint;
    newRateSyToToken: bigint;
    oldRateTokenToSy: bigint;
    oldRateSyToToken: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReBalanceSyToTokenEvent {
  export type InputTuple = [
    netSyRedeem: BigNumberish,
    netTokenFromSy: BigNumberish,
    newTokenProp: BigNumberish,
    oldTokenProp: BigNumberish
  ];
  export type OutputTuple = [
    netSyRedeem: bigint,
    netTokenFromSy: bigint,
    newTokenProp: bigint,
    oldTokenProp: bigint
  ];
  export interface OutputObject {
    netSyRedeem: bigint;
    netTokenFromSy: bigint;
    newTokenProp: bigint;
    oldTokenProp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReBalanceTokenToSyEvent {
  export type InputTuple = [
    netTokenDeposit: BigNumberish,
    netSyFromToken: BigNumberish,
    newTokenProp: BigNumberish,
    oldTokenProp: BigNumberish
  ];
  export type OutputTuple = [
    netTokenDeposit: bigint,
    netSyFromToken: bigint,
    newTokenProp: bigint,
    oldTokenProp: bigint
  ];
  export interface OutputObject {
    netTokenDeposit: bigint;
    netSyFromToken: bigint;
    newTokenProp: bigint;
    oldTokenProp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveUpdatedEvent {
  export type InputTuple = [totalToken: BigNumberish, totalSy: BigNumberish];
  export type OutputTuple = [totalToken: bigint, totalSy: bigint];
  export interface OutputObject {
    totalToken: bigint;
    totalSy: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapExactSyForTokenEvent {
  export type InputTuple = [
    receiver: AddressLike,
    netSyIn: BigNumberish,
    netTokenOut: BigNumberish
  ];
  export type OutputTuple = [
    receiver: string,
    netSyIn: bigint,
    netTokenOut: bigint
  ];
  export interface OutputObject {
    receiver: string;
    netSyIn: bigint;
    netTokenOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapExactTokenForSyEvent {
  export type InputTuple = [
    receiver: AddressLike,
    netTokenIn: BigNumberish,
    netSyOut: BigNumberish
  ];
  export type OutputTuple = [
    receiver: string,
    netTokenIn: bigint,
    netSyOut: bigint
  ];
  export interface OutputObject {
    receiver: string;
    netTokenIn: bigint;
    netSyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BulkSeller extends BaseContract {
  connect(runner?: ContractRunner | null): BulkSeller;
  waitForDeployment(): Promise<this>;

  interface: BulkSellerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  SY: TypedContractMethod<[], [string], "view">;

  _storage: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        rateTokenToSy: bigint;
        rateSyToToken: bigint;
        totalSy: bigint;
        totalToken: bigint;
      }
    ],
    "view"
  >;

  decreaseReserve: TypedContractMethod<
    [netTokenOut: BigNumberish, netSyOut: BigNumberish],
    [void],
    "nonpayable"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  feeRate: TypedContractMethod<[], [bigint], "view">;

  increaseReserve: TypedContractMethod<
    [netTokenIn: BigNumberish, netSyIn: BigNumberish],
    [void],
    "payable"
  >;

  initialize: TypedContractMethod<
    [_token: AddressLike, _SY: AddressLike, _factory: AddressLike],
    [void],
    "nonpayable"
  >;

  reBalance: TypedContractMethod<
    [targetProp: BigNumberish, maxDiff: BigNumberish],
    [void],
    "nonpayable"
  >;

  readState: TypedContractMethod<[], [BulkSellerStateStructOutput], "view">;

  redeemRewards: TypedContractMethod<[], [void], "nonpayable">;

  setFeeRate: TypedContractMethod<
    [newFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRate: TypedContractMethod<
    [
      newRateSyToToken: BigNumberish,
      newRateTokenToSy: BigNumberish,
      maxDiff: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  skim: TypedContractMethod<[], [void], "nonpayable">;

  swapExactSyForToken: TypedContractMethod<
    [
      receiver: AddressLike,
      exactSyIn: BigNumberish,
      minTokenOut: BigNumberish,
      swapFromInternalBalance: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  swapExactTokenForSy: TypedContractMethod<
    [receiver: AddressLike, netTokenIn: BigNumberish, minSyOut: BigNumberish],
    [bigint],
    "payable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(nameOrSignature: "SY"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_storage"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        rateTokenToSy: bigint;
        rateSyToToken: bigint;
        totalSy: bigint;
        totalToken: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "decreaseReserve"
  ): TypedContractMethod<
    [netTokenOut: BigNumberish, netSyOut: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseReserve"
  ): TypedContractMethod<
    [netTokenIn: BigNumberish, netSyIn: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_token: AddressLike, _SY: AddressLike, _factory: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reBalance"
  ): TypedContractMethod<
    [targetProp: BigNumberish, maxDiff: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "readState"
  ): TypedContractMethod<[], [BulkSellerStateStructOutput], "view">;
  getFunction(
    nameOrSignature: "redeemRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRate"
  ): TypedContractMethod<[newFeeRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRate"
  ): TypedContractMethod<
    [
      newRateSyToToken: BigNumberish,
      newRateTokenToSy: BigNumberish,
      maxDiff: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "skim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapExactSyForToken"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      exactSyIn: BigNumberish,
      minTokenOut: BigNumberish,
      swapFromInternalBalance: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokenForSy"
  ): TypedContractMethod<
    [receiver: AddressLike, netTokenIn: BigNumberish, minSyOut: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "FeeRateUpdated"
  ): TypedContractEvent<
    FeeRateUpdatedEvent.InputTuple,
    FeeRateUpdatedEvent.OutputTuple,
    FeeRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RateUpdated"
  ): TypedContractEvent<
    RateUpdatedEvent.InputTuple,
    RateUpdatedEvent.OutputTuple,
    RateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReBalanceSyToToken"
  ): TypedContractEvent<
    ReBalanceSyToTokenEvent.InputTuple,
    ReBalanceSyToTokenEvent.OutputTuple,
    ReBalanceSyToTokenEvent.OutputObject
  >;
  getEvent(
    key: "ReBalanceTokenToSy"
  ): TypedContractEvent<
    ReBalanceTokenToSyEvent.InputTuple,
    ReBalanceTokenToSyEvent.OutputTuple,
    ReBalanceTokenToSyEvent.OutputObject
  >;
  getEvent(
    key: "ReserveUpdated"
  ): TypedContractEvent<
    ReserveUpdatedEvent.InputTuple,
    ReserveUpdatedEvent.OutputTuple,
    ReserveUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SwapExactSyForToken"
  ): TypedContractEvent<
    SwapExactSyForTokenEvent.InputTuple,
    SwapExactSyForTokenEvent.OutputTuple,
    SwapExactSyForTokenEvent.OutputObject
  >;
  getEvent(
    key: "SwapExactTokenForSy"
  ): TypedContractEvent<
    SwapExactTokenForSyEvent.InputTuple,
    SwapExactTokenForSyEvent.OutputTuple,
    SwapExactTokenForSyEvent.OutputObject
  >;

  filters: {
    "FeeRateUpdated(uint256,uint256)": TypedContractEvent<
      FeeRateUpdatedEvent.InputTuple,
      FeeRateUpdatedEvent.OutputTuple,
      FeeRateUpdatedEvent.OutputObject
    >;
    FeeRateUpdated: TypedContractEvent<
      FeeRateUpdatedEvent.InputTuple,
      FeeRateUpdatedEvent.OutputTuple,
      FeeRateUpdatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RateUpdated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      RateUpdatedEvent.InputTuple,
      RateUpdatedEvent.OutputTuple,
      RateUpdatedEvent.OutputObject
    >;
    RateUpdated: TypedContractEvent<
      RateUpdatedEvent.InputTuple,
      RateUpdatedEvent.OutputTuple,
      RateUpdatedEvent.OutputObject
    >;

    "ReBalanceSyToToken(uint256,uint256,uint256,uint256)": TypedContractEvent<
      ReBalanceSyToTokenEvent.InputTuple,
      ReBalanceSyToTokenEvent.OutputTuple,
      ReBalanceSyToTokenEvent.OutputObject
    >;
    ReBalanceSyToToken: TypedContractEvent<
      ReBalanceSyToTokenEvent.InputTuple,
      ReBalanceSyToTokenEvent.OutputTuple,
      ReBalanceSyToTokenEvent.OutputObject
    >;

    "ReBalanceTokenToSy(uint256,uint256,uint256,uint256)": TypedContractEvent<
      ReBalanceTokenToSyEvent.InputTuple,
      ReBalanceTokenToSyEvent.OutputTuple,
      ReBalanceTokenToSyEvent.OutputObject
    >;
    ReBalanceTokenToSy: TypedContractEvent<
      ReBalanceTokenToSyEvent.InputTuple,
      ReBalanceTokenToSyEvent.OutputTuple,
      ReBalanceTokenToSyEvent.OutputObject
    >;

    "ReserveUpdated(uint256,uint256)": TypedContractEvent<
      ReserveUpdatedEvent.InputTuple,
      ReserveUpdatedEvent.OutputTuple,
      ReserveUpdatedEvent.OutputObject
    >;
    ReserveUpdated: TypedContractEvent<
      ReserveUpdatedEvent.InputTuple,
      ReserveUpdatedEvent.OutputTuple,
      ReserveUpdatedEvent.OutputObject
    >;

    "SwapExactSyForToken(address,uint256,uint256)": TypedContractEvent<
      SwapExactSyForTokenEvent.InputTuple,
      SwapExactSyForTokenEvent.OutputTuple,
      SwapExactSyForTokenEvent.OutputObject
    >;
    SwapExactSyForToken: TypedContractEvent<
      SwapExactSyForTokenEvent.InputTuple,
      SwapExactSyForTokenEvent.OutputTuple,
      SwapExactSyForTokenEvent.OutputObject
    >;

    "SwapExactTokenForSy(address,uint256,uint256)": TypedContractEvent<
      SwapExactTokenForSyEvent.InputTuple,
      SwapExactTokenForSyEvent.OutputTuple,
      SwapExactTokenForSyEvent.OutputObject
    >;
    SwapExactTokenForSy: TypedContractEvent<
      SwapExactTokenForSyEvent.InputTuple,
      SwapExactTokenForSyEvent.OutputTuple,
      SwapExactTokenForSyEvent.OutputObject
    >;
  };
}
