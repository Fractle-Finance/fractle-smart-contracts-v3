/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface InterestManagerYTV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "globalInterestIndex"
      | "globalInterestIndexFPT"
      | "lastInterestBlock"
      | "lastInterestDayIndex"
      | "lastInterestUpdatedDayIndexByOracle"
      | "sAPR"
      | "userInterest"
      | "userInterestFPT"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "globalInterestIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalInterestIndexFPT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastInterestBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastInterestDayIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastInterestUpdatedDayIndexByOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sAPR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userInterest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userInterestFPT",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "globalInterestIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalInterestIndexFPT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastInterestBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastInterestDayIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastInterestUpdatedDayIndexByOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userInterestFPT",
    data: BytesLike
  ): Result;
}

export interface InterestManagerYTV3 extends BaseContract {
  connect(runner?: ContractRunner | null): InterestManagerYTV3;
  waitForDeployment(): Promise<this>;

  interface: InterestManagerYTV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  globalInterestIndex: TypedContractMethod<[], [bigint], "view">;

  globalInterestIndexFPT: TypedContractMethod<[], [bigint], "view">;

  lastInterestBlock: TypedContractMethod<[], [bigint], "view">;

  lastInterestDayIndex: TypedContractMethod<[], [bigint], "view">;

  lastInterestUpdatedDayIndexByOracle: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  sAPR: TypedContractMethod<[], [bigint], "view">;

  userInterest: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        index: bigint;
        accrued: bigint;
        pyIndex: bigint;
      }
    ],
    "view"
  >;

  userInterestFPT: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        index: bigint;
        accrued: bigint;
        pyIndex: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "globalInterestIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "globalInterestIndexFPT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastInterestBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastInterestDayIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastInterestUpdatedDayIndexByOracle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sAPR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userInterest"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        index: bigint;
        accrued: bigint;
        pyIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userInterestFPT"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        index: bigint;
        accrued: bigint;
        pyIndex: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
