/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface EuphratesYieldTokenV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "PT"
      | "SY"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "doCacheIndexSameBlock"
      | "doTransferOutInterestFPT"
      | "expiry"
      | "factory"
      | "getPostExpiryData"
      | "getRewardTokens"
      | "globalInterestIndex"
      | "globalInterestIndexFPT"
      | "isDistributingInterestAndRewards"
      | "isExpired"
      | "lastGlobalInterestUpdatedDayIndexByOracle"
      | "lastInterestBlock"
      | "lastRewardBlock"
      | "lifecircle"
      | "mintPY"
      | "mintPYMulti"
      | "name"
      | "postExpiry"
      | "pyIndexCurrent"
      | "pyIndexLastUpdatedBlock"
      | "pyIndexStored"
      | "redeemDueInterestAndRewards"
      | "redeemInterestAndRewardsPostExpiryForTreasury"
      | "redeemPY"
      | "redeemPYMulti"
      | "rewardIndexesCurrent"
      | "rewardState"
      | "sAPR"
      | "setPostExpiryData"
      | "syReserve"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "updateAndDistributeInterestFPT"
      | "updateAndDistributeInterestForTwoFPT"
      | "updateSyReserve"
      | "userInterest"
      | "userInterestFPT"
      | "userReward"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Burn"
      | "CollectInterestFee"
      | "CollectRewardFee"
      | "Mint"
      | "RedeemInterest"
      | "RedeemRewards"
      | "Transfer"
      | "WithdrawFeeToTreasury"
  ): EventFragment;

  encodeFunctionData(functionFragment: "PT", values?: undefined): string;
  encodeFunctionData(functionFragment: "SY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "doCacheIndexSameBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doTransferOutInterestFPT",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "expiry", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPostExpiryData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalInterestIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalInterestIndexFPT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDistributingInterestAndRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isExpired", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastGlobalInterestUpdatedDayIndexByOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastInterestBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lifecircle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintPY",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPYMulti",
    values: [AddressLike[], AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postExpiry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pyIndexCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pyIndexLastUpdatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pyIndexStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDueInterestAndRewards",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemInterestAndRewardsPostExpiryForTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPY",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPYMulti",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardIndexesCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "sAPR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPostExpiryData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "syReserve", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAndDistributeInterestFPT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAndDistributeInterestForTwoFPT",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSyReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInterest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userInterestFPT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userReward",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "PT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doCacheIndexSameBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doTransferOutInterestFPT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPostExpiryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalInterestIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalInterestIndexFPT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDistributingInterestAndRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExpired", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastGlobalInterestUpdatedDayIndexByOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastInterestBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lifecircle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintPYMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postExpiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pyIndexCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pyIndexLastUpdatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pyIndexStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDueInterestAndRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemInterestAndRewardsPostExpiryForTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemPY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemPYMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardIndexesCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPostExpiryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "syReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAndDistributeInterestFPT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAndDistributeInterestForTwoFPT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSyReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userInterestFPT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userReward", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    amountPYToRedeem: BigNumberish,
    amountSyOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    amountPYToRedeem: bigint,
    amountSyOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    amountPYToRedeem: bigint;
    amountSyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectInterestFeeEvent {
  export type InputTuple = [amountInterestFee: BigNumberish];
  export type OutputTuple = [amountInterestFee: bigint];
  export interface OutputObject {
    amountInterestFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectRewardFeeEvent {
  export type InputTuple = [
    rewardToken: AddressLike,
    amountRewardFee: BigNumberish
  ];
  export type OutputTuple = [rewardToken: string, amountRewardFee: bigint];
  export interface OutputObject {
    rewardToken: string;
    amountRewardFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiverPT: AddressLike,
    receiverYT: AddressLike,
    amountSyToMint: BigNumberish,
    amountPYOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiverPT: string,
    receiverYT: string,
    amountSyToMint: bigint,
    amountPYOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiverPT: string;
    receiverYT: string;
    amountSyToMint: bigint;
    amountPYOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemInterestEvent {
  export type InputTuple = [user: AddressLike, interestOut: BigNumberish];
  export type OutputTuple = [user: string, interestOut: bigint];
  export interface OutputObject {
    user: string;
    interestOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemRewardsEvent {
  export type InputTuple = [
    user: AddressLike,
    amountRewardsOut: BigNumberish[]
  ];
  export type OutputTuple = [user: string, amountRewardsOut: bigint[]];
  export interface OutputObject {
    user: string;
    amountRewardsOut: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawFeeToTreasuryEvent {
  export type InputTuple = [
    amountRewardsOut: BigNumberish[],
    syOut: BigNumberish
  ];
  export type OutputTuple = [amountRewardsOut: bigint[], syOut: bigint];
  export interface OutputObject {
    amountRewardsOut: bigint[];
    syOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EuphratesYieldTokenV3 extends BaseContract {
  connect(runner?: ContractRunner | null): EuphratesYieldTokenV3;
  waitForDeployment(): Promise<this>;

  interface: EuphratesYieldTokenV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PT: TypedContractMethod<[], [string], "view">;

  SY: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  doCacheIndexSameBlock: TypedContractMethod<[], [boolean], "view">;

  doTransferOutInterestFPT: TypedContractMethod<
    [user: AddressLike, SY: AddressLike],
    [bigint],
    "nonpayable"
  >;

  expiry: TypedContractMethod<[], [bigint], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  getPostExpiryData: TypedContractMethod<[], [bigint], "view">;

  getRewardTokens: TypedContractMethod<[], [string[]], "view">;

  globalInterestIndex: TypedContractMethod<[], [bigint], "view">;

  globalInterestIndexFPT: TypedContractMethod<[], [bigint], "view">;

  isDistributingInterestAndRewards: TypedContractMethod<[], [boolean], "view">;

  isExpired: TypedContractMethod<[], [boolean], "view">;

  lastGlobalInterestUpdatedDayIndexByOracle: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  lastInterestBlock: TypedContractMethod<[], [bigint], "view">;

  lastRewardBlock: TypedContractMethod<[], [bigint], "view">;

  lifecircle: TypedContractMethod<[], [bigint], "view">;

  mintPY: TypedContractMethod<
    [receiverPT: AddressLike, receiverYT: AddressLike],
    [bigint],
    "nonpayable"
  >;

  mintPYMulti: TypedContractMethod<
    [
      receiverPTs: AddressLike[],
      receiverYTs: AddressLike[],
      amountSyToMints: BigNumberish[]
    ],
    [bigint[]],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  postExpiry: TypedContractMethod<[], [bigint], "view">;

  pyIndexCurrent: TypedContractMethod<[], [bigint], "nonpayable">;

  pyIndexLastUpdatedBlock: TypedContractMethod<[], [bigint], "view">;

  pyIndexStored: TypedContractMethod<[], [bigint], "view">;

  redeemDueInterestAndRewards: TypedContractMethod<
    [user: AddressLike, redeemInterest: boolean, redeemRewards: boolean],
    [[bigint, bigint[]] & { interestOut: bigint; rewardsOut: bigint[] }],
    "nonpayable"
  >;

  redeemInterestAndRewardsPostExpiryForTreasury: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  redeemPY: TypedContractMethod<
    [receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  redeemPYMulti: TypedContractMethod<
    [receivers: AddressLike[], amountPYToRedeems: BigNumberish[]],
    [bigint[]],
    "nonpayable"
  >;

  rewardIndexesCurrent: TypedContractMethod<[], [bigint[]], "nonpayable">;

  rewardState: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { index: bigint; lastBalance: bigint }],
    "view"
  >;

  sAPR: TypedContractMethod<[], [bigint], "view">;

  setPostExpiryData: TypedContractMethod<[], [void], "nonpayable">;

  syReserve: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  updateAndDistributeInterestFPT: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAndDistributeInterestForTwoFPT: TypedContractMethod<
    [user1: AddressLike, user2: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSyReserve: TypedContractMethod<[], [void], "nonpayable">;

  userInterest: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        index: bigint;
        accrued: bigint;
        pyIndex: bigint;
      }
    ],
    "view"
  >;

  userInterestFPT: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        index: bigint;
        accrued: bigint;
        pyIndex: bigint;
      }
    ],
    "view"
  >;

  userReward: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { index: bigint; accrued: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(nameOrSignature: "PT"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "SY"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "doCacheIndexSameBlock"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "doTransferOutInterestFPT"
  ): TypedContractMethod<
    [user: AddressLike, SY: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expiry"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPostExpiryData"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "globalInterestIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "globalInterestIndexFPT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isDistributingInterestAndRewards"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExpired"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastGlobalInterestUpdatedDayIndexByOracle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastInterestBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastRewardBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lifecircle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintPY"
  ): TypedContractMethod<
    [receiverPT: AddressLike, receiverYT: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintPYMulti"
  ): TypedContractMethod<
    [
      receiverPTs: AddressLike[],
      receiverYTs: AddressLike[],
      amountSyToMints: BigNumberish[]
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "postExpiry"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pyIndexCurrent"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "pyIndexLastUpdatedBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pyIndexStored"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeemDueInterestAndRewards"
  ): TypedContractMethod<
    [user: AddressLike, redeemInterest: boolean, redeemRewards: boolean],
    [[bigint, bigint[]] & { interestOut: bigint; rewardsOut: bigint[] }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemInterestAndRewardsPostExpiryForTreasury"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "redeemPY"
  ): TypedContractMethod<[receiver: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "redeemPYMulti"
  ): TypedContractMethod<
    [receivers: AddressLike[], amountPYToRedeems: BigNumberish[]],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardIndexesCurrent"
  ): TypedContractMethod<[], [bigint[]], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardState"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { index: bigint; lastBalance: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "sAPR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setPostExpiryData"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "syReserve"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAndDistributeInterestFPT"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAndDistributeInterestForTwoFPT"
  ): TypedContractMethod<
    [user1: AddressLike, user2: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSyReserve"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userInterest"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        index: bigint;
        accrued: bigint;
        pyIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userInterestFPT"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        index: bigint;
        accrued: bigint;
        pyIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userReward"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { index: bigint; accrued: bigint }],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "CollectInterestFee"
  ): TypedContractEvent<
    CollectInterestFeeEvent.InputTuple,
    CollectInterestFeeEvent.OutputTuple,
    CollectInterestFeeEvent.OutputObject
  >;
  getEvent(
    key: "CollectRewardFee"
  ): TypedContractEvent<
    CollectRewardFeeEvent.InputTuple,
    CollectRewardFeeEvent.OutputTuple,
    CollectRewardFeeEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "RedeemInterest"
  ): TypedContractEvent<
    RedeemInterestEvent.InputTuple,
    RedeemInterestEvent.OutputTuple,
    RedeemInterestEvent.OutputObject
  >;
  getEvent(
    key: "RedeemRewards"
  ): TypedContractEvent<
    RedeemRewardsEvent.InputTuple,
    RedeemRewardsEvent.OutputTuple,
    RedeemRewardsEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawFeeToTreasury"
  ): TypedContractEvent<
    WithdrawFeeToTreasuryEvent.InputTuple,
    WithdrawFeeToTreasuryEvent.OutputTuple,
    WithdrawFeeToTreasuryEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Burn(address,address,uint256,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "CollectInterestFee(uint256)": TypedContractEvent<
      CollectInterestFeeEvent.InputTuple,
      CollectInterestFeeEvent.OutputTuple,
      CollectInterestFeeEvent.OutputObject
    >;
    CollectInterestFee: TypedContractEvent<
      CollectInterestFeeEvent.InputTuple,
      CollectInterestFeeEvent.OutputTuple,
      CollectInterestFeeEvent.OutputObject
    >;

    "CollectRewardFee(address,uint256)": TypedContractEvent<
      CollectRewardFeeEvent.InputTuple,
      CollectRewardFeeEvent.OutputTuple,
      CollectRewardFeeEvent.OutputObject
    >;
    CollectRewardFee: TypedContractEvent<
      CollectRewardFeeEvent.InputTuple,
      CollectRewardFeeEvent.OutputTuple,
      CollectRewardFeeEvent.OutputObject
    >;

    "Mint(address,address,address,uint256,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "RedeemInterest(address,uint256)": TypedContractEvent<
      RedeemInterestEvent.InputTuple,
      RedeemInterestEvent.OutputTuple,
      RedeemInterestEvent.OutputObject
    >;
    RedeemInterest: TypedContractEvent<
      RedeemInterestEvent.InputTuple,
      RedeemInterestEvent.OutputTuple,
      RedeemInterestEvent.OutputObject
    >;

    "RedeemRewards(address,uint256[])": TypedContractEvent<
      RedeemRewardsEvent.InputTuple,
      RedeemRewardsEvent.OutputTuple,
      RedeemRewardsEvent.OutputObject
    >;
    RedeemRewards: TypedContractEvent<
      RedeemRewardsEvent.InputTuple,
      RedeemRewardsEvent.OutputTuple,
      RedeemRewardsEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WithdrawFeeToTreasury(uint256[],uint256)": TypedContractEvent<
      WithdrawFeeToTreasuryEvent.InputTuple,
      WithdrawFeeToTreasuryEvent.OutputTuple,
      WithdrawFeeToTreasuryEvent.OutputObject
    >;
    WithdrawFeeToTreasury: TypedContractEvent<
      WithdrawFeeToTreasuryEvent.InputTuple,
      WithdrawFeeToTreasuryEvent.OutputTuple,
      WithdrawFeeToTreasuryEvent.OutputObject
    >;
  };
}
