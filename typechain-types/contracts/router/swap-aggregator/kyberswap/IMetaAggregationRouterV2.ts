/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IMetaAggregationRouterV2 {
  export type SwapDescriptionV2Struct = {
    srcToken: AddressLike;
    dstToken: AddressLike;
    srcReceivers: AddressLike[];
    srcAmounts: BigNumberish[];
    feeReceivers: AddressLike[];
    feeAmounts: BigNumberish[];
    dstReceiver: AddressLike;
    amount: BigNumberish;
    minReturnAmount: BigNumberish;
    flags: BigNumberish;
    permit: BytesLike;
  };

  export type SwapDescriptionV2StructOutput = [
    srcToken: string,
    dstToken: string,
    srcReceivers: string[],
    srcAmounts: bigint[],
    feeReceivers: string[],
    feeAmounts: bigint[],
    dstReceiver: string,
    amount: bigint,
    minReturnAmount: bigint,
    flags: bigint,
    permit: string
  ] & {
    srcToken: string;
    dstToken: string;
    srcReceivers: string[];
    srcAmounts: bigint[];
    feeReceivers: string[];
    feeAmounts: bigint[];
    dstReceiver: string;
    amount: bigint;
    minReturnAmount: bigint;
    flags: bigint;
    permit: string;
  };

  export type SwapExecutionParamsStruct = {
    callTarget: AddressLike;
    approveTarget: AddressLike;
    targetData: BytesLike;
    desc: IMetaAggregationRouterV2.SwapDescriptionV2Struct;
    clientData: BytesLike;
  };

  export type SwapExecutionParamsStructOutput = [
    callTarget: string,
    approveTarget: string,
    targetData: string,
    desc: IMetaAggregationRouterV2.SwapDescriptionV2StructOutput,
    clientData: string
  ] & {
    callTarget: string;
    approveTarget: string;
    targetData: string;
    desc: IMetaAggregationRouterV2.SwapDescriptionV2StructOutput;
    clientData: string;
  };
}

export interface IMetaAggregationRouterV2Interface extends Interface {
  getFunction(nameOrSignature: "swap" | "swapSimpleMode"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "swap",
    values: [IMetaAggregationRouterV2.SwapExecutionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSimpleMode",
    values: [
      AddressLike,
      IMetaAggregationRouterV2.SwapDescriptionV2Struct,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapSimpleMode",
    data: BytesLike
  ): Result;
}

export interface IMetaAggregationRouterV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IMetaAggregationRouterV2;
  waitForDeployment(): Promise<this>;

  interface: IMetaAggregationRouterV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  swap: TypedContractMethod<
    [execution: IMetaAggregationRouterV2.SwapExecutionParamsStruct],
    [[bigint, bigint]],
    "payable"
  >;

  swapSimpleMode: TypedContractMethod<
    [
      caller: AddressLike,
      desc: IMetaAggregationRouterV2.SwapDescriptionV2Struct,
      executorData: BytesLike,
      clientData: BytesLike
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [execution: IMetaAggregationRouterV2.SwapExecutionParamsStruct],
    [[bigint, bigint]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapSimpleMode"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      desc: IMetaAggregationRouterV2.SwapDescriptionV2Struct,
      executorData: BytesLike,
      clientData: BytesLike
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  filters: {};
}
