/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPActionMisc {
  export type MultiApprovalStruct = {
    tokens: AddressLike[];
    spender: AddressLike;
  };

  export type MultiApprovalStructOutput = [
    tokens: string[],
    spender: string
  ] & { tokens: string[]; spender: string };

  export type Call3Struct = { allowFailure: boolean; callData: BytesLike };

  export type Call3StructOutput = [allowFailure: boolean, callData: string] & {
    allowFailure: boolean;
    callData: string;
  };

  export type ResultStruct = { success: boolean; returnData: BytesLike };

  export type ResultStructOutput = [success: boolean, returnData: string] & {
    success: boolean;
    returnData: string;
  };
}

export interface ActionMiscInterface extends Interface {
  getFunction(nameOrSignature: "approveInf" | "batchExec"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveInf",
    values: [IPActionMisc.MultiApprovalStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchExec",
    values: [IPActionMisc.Call3Struct[]]
  ): string;

  decodeFunctionResult(functionFragment: "approveInf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchExec", data: BytesLike): Result;
}

export interface ActionMisc extends BaseContract {
  connect(runner?: ContractRunner | null): ActionMisc;
  waitForDeployment(): Promise<this>;

  interface: ActionMiscInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveInf: TypedContractMethod<
    [arr: IPActionMisc.MultiApprovalStruct[]],
    [void],
    "nonpayable"
  >;

  batchExec: TypedContractMethod<
    [calls: IPActionMisc.Call3Struct[]],
    [IPActionMisc.ResultStructOutput[]],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveInf"
  ): TypedContractMethod<
    [arr: IPActionMisc.MultiApprovalStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchExec"
  ): TypedContractMethod<
    [calls: IPActionMisc.Call3Struct[]],
    [IPActionMisc.ResultStructOutput[]],
    "nonpayable"
  >;

  filters: {};
}
