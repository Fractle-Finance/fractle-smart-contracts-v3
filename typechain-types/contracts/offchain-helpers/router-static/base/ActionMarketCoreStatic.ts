/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ActionMarketCoreStaticInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidityDualSyAndPtStatic"
      | "addLiquidityDualTokenAndPtStatic"
      | "addLiquiditySinglePtStatic"
      | "addLiquiditySingleSyKeepYtStatic"
      | "addLiquiditySingleSyStatic"
      | "addLiquiditySingleTokenKeepYtStatic"
      | "addLiquiditySingleTokenStatic"
      | "removeLiquidityDualSyAndPtStatic"
      | "removeLiquidityDualTokenAndPtStatic"
      | "removeLiquiditySinglePtStatic"
      | "removeLiquiditySingleSyStatic"
      | "removeLiquiditySingleTokenStatic"
      | "swapExactPtForSyStatic"
      | "swapExactPtForTokenStatic"
      | "swapExactPtForYtStatic"
      | "swapExactSyForPtStatic"
      | "swapExactSyForYtStatic"
      | "swapExactTokenForPtStatic"
      | "swapExactTokenForYtStatic"
      | "swapExactYtForPtStatic"
      | "swapExactYtForSyStatic"
      | "swapExactYtForTokenStatic"
      | "swapPtForExactSyStatic"
      | "swapSyForExactPtStatic"
      | "swapSyForExactYtStatic"
      | "swapYtForExactSyStatic"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidityDualSyAndPtStatic",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityDualTokenAndPtStatic",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySinglePtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleSyKeepYtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleTokenKeepYtStatic",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleTokenStatic",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityDualSyAndPtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityDualTokenAndPtStatic",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySinglePtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySingleSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySingleTokenStatic",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForTokenStatic",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForYtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForPtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForYtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForPtStatic",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForYtStatic",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForPtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForTokenStatic",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPtForExactSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSyForExactPtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSyForExactYtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapYtForExactSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidityDualSyAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityDualTokenAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySinglePtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleSyKeepYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleTokenKeepYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityDualSyAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityDualTokenAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySinglePtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySingleSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySingleTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPtForExactSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSyForExactPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSyForExactYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapYtForExactSyStatic",
    data: BytesLike
  ): Result;
}

export interface ActionMarketCoreStatic extends BaseContract {
  connect(runner?: ContractRunner | null): ActionMarketCoreStatic;
  waitForDeployment(): Promise<this>;

  interface: ActionMarketCoreStaticInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidityDualSyAndPtStatic: TypedContractMethod<
    [
      market: AddressLike,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netSyUsed: bigint;
        netPtUsed: bigint;
      }
    ],
    "view"
  >;

  addLiquidityDualTokenAndPtStatic: TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      netTokenDesired: BigNumberish,
      bulk: AddressLike,
      netPtDesired: BigNumberish
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netTokenUsed: bigint;
        netPtUsed: bigint;
        netSyUsed: bigint;
        netSyDesired: bigint;
      }
    ],
    "view"
  >;

  addLiquiditySinglePtStatic: TypedContractMethod<
    [market: AddressLike, netPtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netPtToSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyFromSwap: bigint;
      }
    ],
    "view"
  >;

  addLiquiditySingleSyKeepYtStatic: TypedContractMethod<
    [market: AddressLike, netSyIn: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netYtOut: bigint;
        netSyToPY: bigint;
      }
    ],
    "view"
  >;

  addLiquiditySingleSyStatic: TypedContractMethod<
    [market: AddressLike, netSyIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netPtFromSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyToSwap: bigint;
      }
    ],
    "view"
  >;

  addLiquiditySingleTokenKeepYtStatic: TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      netTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netYtOut: bigint;
        netSyMinted: bigint;
        netSyToPY: bigint;
      }
    ],
    "view"
  >;

  addLiquiditySingleTokenStatic: TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      netTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netPtFromSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyMinted: bigint;
        netSyToSwap: bigint;
      }
    ],
    "view"
  >;

  removeLiquidityDualSyAndPtStatic: TypedContractMethod<
    [market: AddressLike, netLpToRemove: BigNumberish],
    [[bigint, bigint] & { netSyOut: bigint; netPtOut: bigint }],
    "view"
  >;

  removeLiquidityDualTokenAndPtStatic: TypedContractMethod<
    [
      market: AddressLike,
      netLpToRemove: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netPtOut: bigint;
        netSyToRedeem: bigint;
      }
    ],
    "view"
  >;

  removeLiquiditySinglePtStatic: TypedContractMethod<
    [market: AddressLike, netLpToRemove: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        netPtFromSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyFromBurn: bigint;
        netPtFromBurn: bigint;
      }
    ],
    "view"
  >;

  removeLiquiditySingleSyStatic: TypedContractMethod<
    [market: AddressLike, netLpToRemove: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netSyOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyFromBurn: bigint;
        netPtFromBurn: bigint;
        netSyFromSwap: bigint;
      }
    ],
    "view"
  >;

  removeLiquiditySingleTokenStatic: TypedContractMethod<
    [
      market: AddressLike,
      netLpToRemove: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyOut: bigint;
        netSyFromBurn: bigint;
        netPtFromBurn: bigint;
        netSyFromSwap: bigint;
      }
    ],
    "view"
  >;

  swapExactPtForSyStatic: TypedContractMethod<
    [market: AddressLike, exactPtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netSyOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactPtForTokenStatic: TypedContractMethod<
    [
      market: AddressLike,
      exactPtIn: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyToRedeem: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactPtForYtStatic: TypedContractMethod<
    [market: AddressLike, exactPtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netYtOut: bigint;
        totalPtToSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactSyForPtStatic: TypedContractMethod<
    [market: AddressLike, exactSyIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactSyForYtStatic: TypedContractMethod<
    [market: AddressLike, exactSyIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netYtOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactTokenForPtStatic: TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      amountTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        netSyMinted: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactTokenForYtStatic: TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      amountTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netYtOut: bigint;
        netSyMinted: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactYtForPtStatic: TypedContractMethod<
    [market: AddressLike, exactYtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        totalPtSwapped: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactYtForSyStatic: TypedContractMethod<
    [market: AddressLike, exactYtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netSyOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyOwedInt: bigint;
        netPYToRepaySyOwedInt: bigint;
        netPYToRedeemSyOutInt: bigint;
      }
    ],
    "view"
  >;

  swapExactYtForTokenStatic: TypedContractMethod<
    [
      market: AddressLike,
      exactYtIn: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyOut: bigint;
        netSyOwedInt: bigint;
        netPYToRepaySyOwedInt: bigint;
        netPYToRedeemSyOutInt: bigint;
      }
    ],
    "view"
  >;

  swapPtForExactSyStatic: TypedContractMethod<
    [market: AddressLike, exactSyOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netPtIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapSyForExactPtStatic: TypedContractMethod<
    [market: AddressLike, exactPtOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netSyIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapSyForExactYtStatic: TypedContractMethod<
    [market: AddressLike, exactYtOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        netSyIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyReceivedInt: bigint;
        totalSyNeedInt: bigint;
      }
    ],
    "view"
  >;

  swapYtForExactSyStatic: TypedContractMethod<
    [market: AddressLike, exactSyOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netYtIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidityDualSyAndPtStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netSyUsed: bigint;
        netPtUsed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquidityDualTokenAndPtStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      netTokenDesired: BigNumberish,
      bulk: AddressLike,
      netPtDesired: BigNumberish
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netTokenUsed: bigint;
        netPtUsed: bigint;
        netSyUsed: bigint;
        netSyDesired: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySinglePtStatic"
  ): TypedContractMethod<
    [market: AddressLike, netPtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netPtToSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyFromSwap: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySingleSyKeepYtStatic"
  ): TypedContractMethod<
    [market: AddressLike, netSyIn: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netYtOut: bigint;
        netSyToPY: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySingleSyStatic"
  ): TypedContractMethod<
    [market: AddressLike, netSyIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netPtFromSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyToSwap: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySingleTokenKeepYtStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      netTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netYtOut: bigint;
        netSyMinted: bigint;
        netSyToPY: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySingleTokenStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      netTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netPtFromSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyMinted: bigint;
        netSyToSwap: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityDualSyAndPtStatic"
  ): TypedContractMethod<
    [market: AddressLike, netLpToRemove: BigNumberish],
    [[bigint, bigint] & { netSyOut: bigint; netPtOut: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityDualTokenAndPtStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      netLpToRemove: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netPtOut: bigint;
        netSyToRedeem: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquiditySinglePtStatic"
  ): TypedContractMethod<
    [market: AddressLike, netLpToRemove: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        netPtFromSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyFromBurn: bigint;
        netPtFromBurn: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquiditySingleSyStatic"
  ): TypedContractMethod<
    [market: AddressLike, netLpToRemove: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netSyOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyFromBurn: bigint;
        netPtFromBurn: bigint;
        netSyFromSwap: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquiditySingleTokenStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      netLpToRemove: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyOut: bigint;
        netSyFromBurn: bigint;
        netPtFromBurn: bigint;
        netSyFromSwap: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactPtForSyStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactPtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netSyOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactPtForTokenStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      exactPtIn: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyToRedeem: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactPtForYtStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactPtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netYtOut: bigint;
        totalPtToSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactSyForPtStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactSyIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactSyForYtStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactSyIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netYtOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactTokenForPtStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      amountTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        netSyMinted: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactTokenForYtStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      amountTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netYtOut: bigint;
        netSyMinted: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactYtForPtStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactYtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        totalPtSwapped: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactYtForSyStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactYtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netSyOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyOwedInt: bigint;
        netPYToRepaySyOwedInt: bigint;
        netPYToRedeemSyOutInt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactYtForTokenStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      exactYtIn: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyOut: bigint;
        netSyOwedInt: bigint;
        netPYToRepaySyOwedInt: bigint;
        netPYToRedeemSyOutInt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapPtForExactSyStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactSyOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netPtIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapSyForExactPtStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactPtOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netSyIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapSyForExactYtStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactYtOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        netSyIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyReceivedInt: bigint;
        totalSyNeedInt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapYtForExactSyStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactSyOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netYtIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
