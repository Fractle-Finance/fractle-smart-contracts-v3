/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type SwapDataStruct = {
  swapType: BigNumberish;
  extRouter: AddressLike;
  extCalldata: BytesLike;
  needScale: boolean;
};

export type SwapDataStructOutput = [
  swapType: bigint,
  extRouter: string,
  extCalldata: string,
  needScale: boolean
] & {
  swapType: bigint;
  extRouter: string;
  extCalldata: string;
  needScale: boolean;
};

export type TokenInputStruct = {
  tokenIn: AddressLike;
  netTokenIn: BigNumberish;
  tokenMintSy: AddressLike;
  bulk: AddressLike;
  euphratesSwap: AddressLike;
  swapData: SwapDataStruct;
};

export type TokenInputStructOutput = [
  tokenIn: string,
  netTokenIn: bigint,
  tokenMintSy: string,
  bulk: string,
  euphratesSwap: string,
  swapData: SwapDataStructOutput
] & {
  tokenIn: string;
  netTokenIn: bigint;
  tokenMintSy: string;
  bulk: string;
  euphratesSwap: string;
  swapData: SwapDataStructOutput;
};

export type ApproxParamsStruct = {
  guessMin: BigNumberish;
  guessMax: BigNumberish;
  guessOffchain: BigNumberish;
  maxIteration: BigNumberish;
  eps: BigNumberish;
};

export type ApproxParamsStructOutput = [
  guessMin: bigint,
  guessMax: bigint,
  guessOffchain: bigint,
  maxIteration: bigint,
  eps: bigint
] & {
  guessMin: bigint;
  guessMax: bigint;
  guessOffchain: bigint;
  maxIteration: bigint;
  eps: bigint;
};

export type TokenOutputStruct = {
  tokenOut: AddressLike;
  minTokenOut: BigNumberish;
  tokenRedeemSy: AddressLike;
  bulk: AddressLike;
  euphratesSwap: AddressLike;
  swapData: SwapDataStruct;
};

export type TokenOutputStructOutput = [
  tokenOut: string,
  minTokenOut: bigint,
  tokenRedeemSy: string,
  bulk: string,
  euphratesSwap: string,
  swapData: SwapDataStructOutput
] & {
  tokenOut: string;
  minTokenOut: bigint;
  tokenRedeemSy: string;
  bulk: string;
  euphratesSwap: string;
  swapData: SwapDataStructOutput;
};

export declare namespace IPActionMisc {
  export type MultiApprovalStruct = {
    tokens: AddressLike[];
    spender: AddressLike;
  };

  export type MultiApprovalStructOutput = [
    tokens: string[],
    spender: string
  ] & { tokens: string[]; spender: string };

  export type Call3Struct = { allowFailure: boolean; callData: BytesLike };

  export type Call3StructOutput = [allowFailure: boolean, callData: string] & {
    allowFailure: boolean;
    callData: string;
  };

  export type ResultStruct = { success: boolean; returnData: BytesLike };

  export type ResultStructOutput = [success: boolean, returnData: string] & {
    success: boolean;
    returnData: string;
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: AddressLike;
    functionSelectors: BytesLike[];
  };

  export type FacetStructOutput = [
    facetAddress: string,
    functionSelectors: string[]
  ] & { facetAddress: string; functionSelectors: string[] };
}

export interface IPAllActionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidityDualSyAndPt"
      | "addLiquidityDualTokenAndPt"
      | "addLiquiditySinglePt"
      | "addLiquiditySingleSy"
      | "addLiquiditySingleSyKeepYt"
      | "addLiquiditySingleToken"
      | "addLiquiditySingleTokenKeepYt"
      | "approveInf"
      | "batchExec"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "mintPyFromSy"
      | "mintPyFromToken"
      | "mintSyFromToken"
      | "redeemDueInterestAndRewards"
      | "redeemPyToSy"
      | "redeemPyToToken"
      | "redeemSyToToken"
      | "removeLiquidityDualSyAndPt"
      | "removeLiquidityDualTokenAndPt"
      | "removeLiquiditySinglePt"
      | "removeLiquiditySingleSy"
      | "removeLiquiditySingleToken"
      | "swapCallback"
      | "swapExactPtForSy"
      | "swapExactPtForToken"
      | "swapExactPtForYt"
      | "swapExactSyForPt"
      | "swapExactSyForYt"
      | "swapExactTokenForPt"
      | "swapExactTokenForYt"
      | "swapExactYtForPt"
      | "swapExactYtForSy"
      | "swapExactYtForToken"
      | "swapPtForExactSy"
      | "swapSyForExactPt"
      | "swapSyForExactYt"
      | "swapYtForExactSy"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddLiquidityDualSyAndPt"
      | "AddLiquidityDualTokenAndPt"
      | "AddLiquiditySinglePt"
      | "AddLiquiditySingleSy"
      | "AddLiquiditySingleSyKeepYt"
      | "AddLiquiditySingleToken"
      | "AddLiquiditySingleTokenKeepYt"
      | "MintPyFromSy"
      | "MintPyFromToken"
      | "MintSyFromToken"
      | "RedeemPyToSy"
      | "RedeemPyToToken"
      | "RedeemSyToToken"
      | "RemoveLiquidityDualSyAndPt"
      | "RemoveLiquidityDualTokenAndPt"
      | "RemoveLiquiditySinglePt"
      | "RemoveLiquiditySingleSy"
      | "RemoveLiquiditySingleToken"
      | "SwapPtAndSy"
      | "SwapPtAndToken"
      | "SwapPtAndYt"
      | "SwapYtAndSy"
      | "SwapYtAndToken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLiquidityDualSyAndPt",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityDualTokenAndPt",
    values: [
      AddressLike,
      AddressLike,
      TokenInputStruct,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySinglePt",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      ApproxParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleSy",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      ApproxParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleSyKeepYt",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleToken",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      ApproxParamsStruct,
      TokenInputStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleTokenKeepYt",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      TokenInputStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveInf",
    values: [IPActionMisc.MultiApprovalStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchExec",
    values: [IPActionMisc.Call3Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintPyFromSy",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPyFromToken",
    values: [AddressLike, AddressLike, BigNumberish, TokenInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSyFromToken",
    values: [AddressLike, AddressLike, BigNumberish, TokenInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDueInterestAndRewards",
    values: [AddressLike, AddressLike[], AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPyToSy",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPyToToken",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemSyToToken",
    values: [AddressLike, AddressLike, BigNumberish, TokenOutputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityDualSyAndPt",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityDualTokenAndPt",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      TokenOutputStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySinglePt",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      ApproxParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySingleSy",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySingleToken",
    values: [AddressLike, AddressLike, BigNumberish, TokenOutputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForSy",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForToken",
    values: [AddressLike, AddressLike, BigNumberish, TokenOutputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForYt",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      ApproxParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForPt",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      ApproxParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForYt",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      ApproxParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForPt",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      ApproxParamsStruct,
      TokenInputStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForYt",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      ApproxParamsStruct,
      TokenInputStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForPt",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      ApproxParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForSy",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForToken",
    values: [AddressLike, AddressLike, BigNumberish, TokenOutputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPtForExactSy",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      ApproxParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSyForExactPt",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSyForExactYt",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapYtForExactSy",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      ApproxParamsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidityDualSyAndPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityDualTokenAndPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySinglePt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleSyKeepYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleTokenKeepYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approveInf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchExec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintPyFromSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPyFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintSyFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDueInterestAndRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPyToSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPyToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemSyToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityDualSyAndPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityDualTokenAndPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySinglePt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySingleSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySingleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPtForExactSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSyForExactPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSyForExactYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapYtForExactSy",
    data: BytesLike
  ): Result;
}

export namespace AddLiquidityDualSyAndPtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netSyUsed: BigNumberish,
    netPtUsed: BigNumberish,
    netLpOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netSyUsed: bigint,
    netPtUsed: bigint,
    netLpOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netSyUsed: bigint;
    netPtUsed: bigint;
    netLpOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquidityDualTokenAndPtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    tokenIn: AddressLike,
    receiver: AddressLike,
    netTokenUsed: BigNumberish,
    netPtUsed: BigNumberish,
    netLpOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    tokenIn: string,
    receiver: string,
    netTokenUsed: bigint,
    netPtUsed: bigint,
    netLpOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    tokenIn: string;
    receiver: string;
    netTokenUsed: bigint;
    netPtUsed: bigint;
    netLpOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquiditySinglePtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netPtIn: BigNumberish,
    netLpOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netPtIn: bigint,
    netLpOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netPtIn: bigint;
    netLpOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquiditySingleSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netSyIn: BigNumberish,
    netLpOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netSyIn: bigint,
    netLpOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netSyIn: bigint;
    netLpOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquiditySingleSyKeepYtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netSyIn: BigNumberish,
    netLpOut: BigNumberish,
    netYtOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netSyIn: bigint,
    netLpOut: bigint,
    netYtOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netSyIn: bigint;
    netLpOut: bigint;
    netYtOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquiditySingleTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netTokenIn: BigNumberish,
    netLpOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netTokenIn: bigint,
    netLpOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netTokenIn: bigint;
    netLpOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquiditySingleTokenKeepYtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netTokenIn: BigNumberish,
    netLpOut: BigNumberish,
    netYtOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netTokenIn: bigint,
    netLpOut: bigint,
    netYtOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netTokenIn: bigint;
    netLpOut: bigint;
    netYtOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintPyFromSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    YT: AddressLike,
    netSyIn: BigNumberish,
    netPyOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    YT: string,
    netSyIn: bigint,
    netPyOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    YT: string;
    netSyIn: bigint;
    netPyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintPyFromTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    tokenIn: AddressLike,
    YT: AddressLike,
    receiver: AddressLike,
    netTokenIn: BigNumberish,
    netPyOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    tokenIn: string,
    YT: string,
    receiver: string,
    netTokenIn: bigint,
    netPyOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    tokenIn: string;
    YT: string;
    receiver: string;
    netTokenIn: bigint;
    netPyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintSyFromTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    tokenIn: AddressLike,
    SY: AddressLike,
    receiver: AddressLike,
    netTokenIn: BigNumberish,
    netSyOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    tokenIn: string,
    SY: string,
    receiver: string,
    netTokenIn: bigint,
    netSyOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    tokenIn: string;
    SY: string;
    receiver: string;
    netTokenIn: bigint;
    netSyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemPyToSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    YT: AddressLike,
    netPyIn: BigNumberish,
    netSyOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    YT: string,
    netPyIn: bigint,
    netSyOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    YT: string;
    netPyIn: bigint;
    netSyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemPyToTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    tokenOut: AddressLike,
    YT: AddressLike,
    receiver: AddressLike,
    netPyIn: BigNumberish,
    netTokenOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    tokenOut: string,
    YT: string,
    receiver: string,
    netPyIn: bigint,
    netTokenOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    tokenOut: string;
    YT: string;
    receiver: string;
    netPyIn: bigint;
    netTokenOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemSyToTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    tokenOut: AddressLike,
    SY: AddressLike,
    receiver: AddressLike,
    netSyIn: BigNumberish,
    netTokenOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    tokenOut: string,
    SY: string,
    receiver: string,
    netSyIn: bigint,
    netTokenOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    tokenOut: string;
    SY: string;
    receiver: string;
    netSyIn: bigint;
    netTokenOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityDualSyAndPtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netLpToRemove: BigNumberish,
    netPtOut: BigNumberish,
    netSyOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netLpToRemove: bigint,
    netPtOut: bigint,
    netSyOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netLpToRemove: bigint;
    netPtOut: bigint;
    netSyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityDualTokenAndPtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    tokenOut: AddressLike,
    receiver: AddressLike,
    netLpToRemove: BigNumberish,
    netPtOut: BigNumberish,
    netTokenOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    tokenOut: string,
    receiver: string,
    netLpToRemove: bigint,
    netPtOut: bigint,
    netTokenOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    tokenOut: string;
    receiver: string;
    netLpToRemove: bigint;
    netPtOut: bigint;
    netTokenOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquiditySinglePtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netLpToRemove: BigNumberish,
    netPtOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netLpToRemove: bigint,
    netPtOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netLpToRemove: bigint;
    netPtOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquiditySingleSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netLpToRemove: BigNumberish,
    netSyOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netLpToRemove: bigint,
    netSyOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netLpToRemove: bigint;
    netSyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquiditySingleTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netLpToRemove: BigNumberish,
    netTokenOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netLpToRemove: bigint,
    netTokenOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netLpToRemove: bigint;
    netTokenOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapPtAndSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netPtToAccount: BigNumberish,
    netSyToAccount: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netPtToAccount: bigint,
    netSyToAccount: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netPtToAccount: bigint;
    netSyToAccount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapPtAndTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netPtToAccount: BigNumberish,
    netTokenToAccount: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netPtToAccount: bigint,
    netTokenToAccount: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netPtToAccount: bigint;
    netTokenToAccount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapPtAndYtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netPtToAccount: BigNumberish,
    netYtToAccount: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netPtToAccount: bigint,
    netYtToAccount: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netPtToAccount: bigint;
    netYtToAccount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapYtAndSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netYtToAccount: BigNumberish,
    netSyToAccount: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netYtToAccount: bigint,
    netSyToAccount: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netYtToAccount: bigint;
    netSyToAccount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapYtAndTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netYtToAccount: BigNumberish,
    netTokenToAccount: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netYtToAccount: bigint,
    netTokenToAccount: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netYtToAccount: bigint;
    netTokenToAccount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPAllAction extends BaseContract {
  connect(runner?: ContractRunner | null): IPAllAction;
  waitForDeployment(): Promise<this>;

  interface: IPAllActionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidityDualSyAndPt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      minLpOut: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netSyUsed: bigint;
        netPtUsed: bigint;
      }
    ],
    "nonpayable"
  >;

  addLiquidityDualTokenAndPt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      input: TokenInputStruct,
      netPtDesired: BigNumberish,
      minLpOut: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netTokenUsed: bigint;
        netPtUsed: bigint;
      }
    ],
    "payable"
  >;

  addLiquiditySinglePt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netPtIn: BigNumberish,
      minLpOut: BigNumberish,
      guessPtSwapToSy: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netLpOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  addLiquiditySingleSy: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netSyIn: BigNumberish,
      minLpOut: BigNumberish,
      guessPtReceivedFromSy: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netLpOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  addLiquiditySingleSyKeepYt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netSyIn: BigNumberish,
      minLpOut: BigNumberish,
      minYtOut: BigNumberish
    ],
    [[bigint, bigint] & { netLpOut: bigint; netYtOut: bigint }],
    "nonpayable"
  >;

  addLiquiditySingleToken: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      minLpOut: BigNumberish,
      guessPtReceivedFromSy: ApproxParamsStruct,
      input: TokenInputStruct
    ],
    [[bigint, bigint] & { netLpOut: bigint; netSyFee: bigint }],
    "payable"
  >;

  addLiquiditySingleTokenKeepYt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      minLpOut: BigNumberish,
      minYtOut: BigNumberish,
      input: TokenInputStruct
    ],
    [[bigint, bigint] & { netLpOut: bigint; netYtOut: bigint }],
    "nonpayable"
  >;

  approveInf: TypedContractMethod<
    [arg0: IPActionMisc.MultiApprovalStruct[]],
    [void],
    "nonpayable"
  >;

  batchExec: TypedContractMethod<
    [calls: IPActionMisc.Call3Struct[]],
    [IPActionMisc.ResultStructOutput[]],
    "nonpayable"
  >;

  facetAddress: TypedContractMethod<
    [_functionSelector: BytesLike],
    [string],
    "view"
  >;

  facetAddresses: TypedContractMethod<[], [string[]], "view">;

  facetFunctionSelectors: TypedContractMethod<
    [_facet: AddressLike],
    [string[]],
    "view"
  >;

  facets: TypedContractMethod<[], [IDiamondLoupe.FacetStructOutput[]], "view">;

  mintPyFromSy: TypedContractMethod<
    [
      receiver: AddressLike,
      YT: AddressLike,
      netSyIn: BigNumberish,
      minPyOut: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  mintPyFromToken: TypedContractMethod<
    [
      receiver: AddressLike,
      YT: AddressLike,
      minPyOut: BigNumberish,
      input: TokenInputStruct
    ],
    [bigint],
    "payable"
  >;

  mintSyFromToken: TypedContractMethod<
    [
      receiver: AddressLike,
      SY: AddressLike,
      minSyOut: BigNumberish,
      input: TokenInputStruct
    ],
    [bigint],
    "payable"
  >;

  redeemDueInterestAndRewards: TypedContractMethod<
    [
      user: AddressLike,
      sys: AddressLike[],
      yts: AddressLike[],
      markets: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  redeemPyToSy: TypedContractMethod<
    [
      receiver: AddressLike,
      YT: AddressLike,
      netPyIn: BigNumberish,
      minSyOut: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  redeemPyToToken: TypedContractMethod<
    [
      receiver: AddressLike,
      YT: AddressLike,
      netPyIn: BigNumberish,
      tokenRedeemSy: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  redeemSyToToken: TypedContractMethod<
    [
      receiver: AddressLike,
      SY: AddressLike,
      netSyIn: BigNumberish,
      output: TokenOutputStruct
    ],
    [bigint],
    "nonpayable"
  >;

  removeLiquidityDualSyAndPt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netLpToRemove: BigNumberish,
      minSyOut: BigNumberish,
      minPtOut: BigNumberish
    ],
    [[bigint, bigint] & { netSyOut: bigint; netPtOut: bigint }],
    "nonpayable"
  >;

  removeLiquidityDualTokenAndPt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netLpToRemove: BigNumberish,
      output: TokenOutputStruct,
      minPtOut: BigNumberish
    ],
    [[bigint, bigint] & { netTokenOut: bigint; netPtOut: bigint }],
    "nonpayable"
  >;

  removeLiquiditySinglePt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netLpToRemove: BigNumberish,
      minPtOut: BigNumberish,
      guessPtOut: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netPtOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  removeLiquiditySingleSy: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netLpToRemove: BigNumberish,
      minSyOut: BigNumberish
    ],
    [[bigint, bigint] & { netSyOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  removeLiquiditySingleToken: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netLpToRemove: BigNumberish,
      output: TokenOutputStruct
    ],
    [[bigint, bigint] & { netTokenOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapCallback: TypedContractMethod<
    [ptToAccount: BigNumberish, syToAccount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  swapExactPtForSy: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactPtIn: BigNumberish,
      minSyOut: BigNumberish
    ],
    [[bigint, bigint] & { netSyOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapExactPtForToken: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactPtIn: BigNumberish,
      output: TokenOutputStruct
    ],
    [[bigint, bigint] & { netTokenOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapExactPtForYt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactPtIn: BigNumberish,
      minYtOut: BigNumberish,
      guessTotalPtToSwap: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netYtOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapExactSyForPt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactSyIn: BigNumberish,
      minPtOut: BigNumberish,
      guessPtOut: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netPtOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapExactSyForYt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactSyIn: BigNumberish,
      minYtOut: BigNumberish,
      guessYtOut: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netYtOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapExactTokenForPt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      minPtOut: BigNumberish,
      guessPtOut: ApproxParamsStruct,
      input: TokenInputStruct
    ],
    [[bigint, bigint] & { netPtOut: bigint; netSyFee: bigint }],
    "payable"
  >;

  swapExactTokenForYt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      minYtOut: BigNumberish,
      guessYtOut: ApproxParamsStruct,
      input: TokenInputStruct
    ],
    [[bigint, bigint] & { netYtOut: bigint; netSyFee: bigint }],
    "payable"
  >;

  swapExactYtForPt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactYtIn: BigNumberish,
      minPtOut: BigNumberish,
      guessTotalPtSwapped: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netPtOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapExactYtForSy: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactYtIn: BigNumberish,
      minSyOut: BigNumberish
    ],
    [[bigint, bigint] & { netSyOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapExactYtForToken: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netYtIn: BigNumberish,
      output: TokenOutputStruct
    ],
    [[bigint, bigint] & { netTokenOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapPtForExactSy: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactSyOut: BigNumberish,
      maxPtIn: BigNumberish,
      guessPtIn: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netPtIn: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapSyForExactPt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactPtOut: BigNumberish,
      maxSyIn: BigNumberish
    ],
    [[bigint, bigint] & { netSyIn: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapSyForExactYt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactYtOut: BigNumberish,
      maxSyIn: BigNumberish
    ],
    [[bigint, bigint] & { netSyIn: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapYtForExactSy: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactSyOut: BigNumberish,
      maxYtIn: BigNumberish,
      guessYtIn: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netYtIn: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidityDualSyAndPt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      minLpOut: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netSyUsed: bigint;
        netPtUsed: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidityDualTokenAndPt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      input: TokenInputStruct,
      netPtDesired: BigNumberish,
      minLpOut: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netTokenUsed: bigint;
        netPtUsed: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySinglePt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netPtIn: BigNumberish,
      minLpOut: BigNumberish,
      guessPtSwapToSy: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netLpOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySingleSy"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netSyIn: BigNumberish,
      minLpOut: BigNumberish,
      guessPtReceivedFromSy: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netLpOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySingleSyKeepYt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netSyIn: BigNumberish,
      minLpOut: BigNumberish,
      minYtOut: BigNumberish
    ],
    [[bigint, bigint] & { netLpOut: bigint; netYtOut: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySingleToken"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      minLpOut: BigNumberish,
      guessPtReceivedFromSy: ApproxParamsStruct,
      input: TokenInputStruct
    ],
    [[bigint, bigint] & { netLpOut: bigint; netSyFee: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySingleTokenKeepYt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      minLpOut: BigNumberish,
      minYtOut: BigNumberish,
      input: TokenInputStruct
    ],
    [[bigint, bigint] & { netLpOut: bigint; netYtOut: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveInf"
  ): TypedContractMethod<
    [arg0: IPActionMisc.MultiApprovalStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchExec"
  ): TypedContractMethod<
    [calls: IPActionMisc.Call3Struct[]],
    [IPActionMisc.ResultStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "facetAddress"
  ): TypedContractMethod<[_functionSelector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "facetAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetFunctionSelectors"
  ): TypedContractMethod<[_facet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "facets"
  ): TypedContractMethod<[], [IDiamondLoupe.FacetStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "mintPyFromSy"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      YT: AddressLike,
      netSyIn: BigNumberish,
      minPyOut: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintPyFromToken"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      YT: AddressLike,
      minPyOut: BigNumberish,
      input: TokenInputStruct
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintSyFromToken"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      SY: AddressLike,
      minSyOut: BigNumberish,
      input: TokenInputStruct
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "redeemDueInterestAndRewards"
  ): TypedContractMethod<
    [
      user: AddressLike,
      sys: AddressLike[],
      yts: AddressLike[],
      markets: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemPyToSy"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      YT: AddressLike,
      netPyIn: BigNumberish,
      minSyOut: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemPyToToken"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      YT: AddressLike,
      netPyIn: BigNumberish,
      tokenRedeemSy: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemSyToToken"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      SY: AddressLike,
      netSyIn: BigNumberish,
      output: TokenOutputStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityDualSyAndPt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netLpToRemove: BigNumberish,
      minSyOut: BigNumberish,
      minPtOut: BigNumberish
    ],
    [[bigint, bigint] & { netSyOut: bigint; netPtOut: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityDualTokenAndPt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netLpToRemove: BigNumberish,
      output: TokenOutputStruct,
      minPtOut: BigNumberish
    ],
    [[bigint, bigint] & { netTokenOut: bigint; netPtOut: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquiditySinglePt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netLpToRemove: BigNumberish,
      minPtOut: BigNumberish,
      guessPtOut: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netPtOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquiditySingleSy"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netLpToRemove: BigNumberish,
      minSyOut: BigNumberish
    ],
    [[bigint, bigint] & { netSyOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquiditySingleToken"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netLpToRemove: BigNumberish,
      output: TokenOutputStruct
    ],
    [[bigint, bigint] & { netTokenOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapCallback"
  ): TypedContractMethod<
    [ptToAccount: BigNumberish, syToAccount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactPtForSy"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactPtIn: BigNumberish,
      minSyOut: BigNumberish
    ],
    [[bigint, bigint] & { netSyOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactPtForToken"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactPtIn: BigNumberish,
      output: TokenOutputStruct
    ],
    [[bigint, bigint] & { netTokenOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactPtForYt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactPtIn: BigNumberish,
      minYtOut: BigNumberish,
      guessTotalPtToSwap: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netYtOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactSyForPt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactSyIn: BigNumberish,
      minPtOut: BigNumberish,
      guessPtOut: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netPtOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactSyForYt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactSyIn: BigNumberish,
      minYtOut: BigNumberish,
      guessYtOut: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netYtOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokenForPt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      minPtOut: BigNumberish,
      guessPtOut: ApproxParamsStruct,
      input: TokenInputStruct
    ],
    [[bigint, bigint] & { netPtOut: bigint; netSyFee: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokenForYt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      minYtOut: BigNumberish,
      guessYtOut: ApproxParamsStruct,
      input: TokenInputStruct
    ],
    [[bigint, bigint] & { netYtOut: bigint; netSyFee: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapExactYtForPt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactYtIn: BigNumberish,
      minPtOut: BigNumberish,
      guessTotalPtSwapped: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netPtOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactYtForSy"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactYtIn: BigNumberish,
      minSyOut: BigNumberish
    ],
    [[bigint, bigint] & { netSyOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactYtForToken"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      netYtIn: BigNumberish,
      output: TokenOutputStruct
    ],
    [[bigint, bigint] & { netTokenOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapPtForExactSy"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactSyOut: BigNumberish,
      maxPtIn: BigNumberish,
      guessPtIn: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netPtIn: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapSyForExactPt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactPtOut: BigNumberish,
      maxSyIn: BigNumberish
    ],
    [[bigint, bigint] & { netSyIn: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapSyForExactYt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactYtOut: BigNumberish,
      maxSyIn: BigNumberish
    ],
    [[bigint, bigint] & { netSyIn: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapYtForExactSy"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactSyOut: BigNumberish,
      maxYtIn: BigNumberish,
      guessYtIn: ApproxParamsStruct
    ],
    [[bigint, bigint] & { netYtIn: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  getEvent(
    key: "AddLiquidityDualSyAndPt"
  ): TypedContractEvent<
    AddLiquidityDualSyAndPtEvent.InputTuple,
    AddLiquidityDualSyAndPtEvent.OutputTuple,
    AddLiquidityDualSyAndPtEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquidityDualTokenAndPt"
  ): TypedContractEvent<
    AddLiquidityDualTokenAndPtEvent.InputTuple,
    AddLiquidityDualTokenAndPtEvent.OutputTuple,
    AddLiquidityDualTokenAndPtEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquiditySinglePt"
  ): TypedContractEvent<
    AddLiquiditySinglePtEvent.InputTuple,
    AddLiquiditySinglePtEvent.OutputTuple,
    AddLiquiditySinglePtEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquiditySingleSy"
  ): TypedContractEvent<
    AddLiquiditySingleSyEvent.InputTuple,
    AddLiquiditySingleSyEvent.OutputTuple,
    AddLiquiditySingleSyEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquiditySingleSyKeepYt"
  ): TypedContractEvent<
    AddLiquiditySingleSyKeepYtEvent.InputTuple,
    AddLiquiditySingleSyKeepYtEvent.OutputTuple,
    AddLiquiditySingleSyKeepYtEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquiditySingleToken"
  ): TypedContractEvent<
    AddLiquiditySingleTokenEvent.InputTuple,
    AddLiquiditySingleTokenEvent.OutputTuple,
    AddLiquiditySingleTokenEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquiditySingleTokenKeepYt"
  ): TypedContractEvent<
    AddLiquiditySingleTokenKeepYtEvent.InputTuple,
    AddLiquiditySingleTokenKeepYtEvent.OutputTuple,
    AddLiquiditySingleTokenKeepYtEvent.OutputObject
  >;
  getEvent(
    key: "MintPyFromSy"
  ): TypedContractEvent<
    MintPyFromSyEvent.InputTuple,
    MintPyFromSyEvent.OutputTuple,
    MintPyFromSyEvent.OutputObject
  >;
  getEvent(
    key: "MintPyFromToken"
  ): TypedContractEvent<
    MintPyFromTokenEvent.InputTuple,
    MintPyFromTokenEvent.OutputTuple,
    MintPyFromTokenEvent.OutputObject
  >;
  getEvent(
    key: "MintSyFromToken"
  ): TypedContractEvent<
    MintSyFromTokenEvent.InputTuple,
    MintSyFromTokenEvent.OutputTuple,
    MintSyFromTokenEvent.OutputObject
  >;
  getEvent(
    key: "RedeemPyToSy"
  ): TypedContractEvent<
    RedeemPyToSyEvent.InputTuple,
    RedeemPyToSyEvent.OutputTuple,
    RedeemPyToSyEvent.OutputObject
  >;
  getEvent(
    key: "RedeemPyToToken"
  ): TypedContractEvent<
    RedeemPyToTokenEvent.InputTuple,
    RedeemPyToTokenEvent.OutputTuple,
    RedeemPyToTokenEvent.OutputObject
  >;
  getEvent(
    key: "RedeemSyToToken"
  ): TypedContractEvent<
    RedeemSyToTokenEvent.InputTuple,
    RedeemSyToTokenEvent.OutputTuple,
    RedeemSyToTokenEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidityDualSyAndPt"
  ): TypedContractEvent<
    RemoveLiquidityDualSyAndPtEvent.InputTuple,
    RemoveLiquidityDualSyAndPtEvent.OutputTuple,
    RemoveLiquidityDualSyAndPtEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidityDualTokenAndPt"
  ): TypedContractEvent<
    RemoveLiquidityDualTokenAndPtEvent.InputTuple,
    RemoveLiquidityDualTokenAndPtEvent.OutputTuple,
    RemoveLiquidityDualTokenAndPtEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquiditySinglePt"
  ): TypedContractEvent<
    RemoveLiquiditySinglePtEvent.InputTuple,
    RemoveLiquiditySinglePtEvent.OutputTuple,
    RemoveLiquiditySinglePtEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquiditySingleSy"
  ): TypedContractEvent<
    RemoveLiquiditySingleSyEvent.InputTuple,
    RemoveLiquiditySingleSyEvent.OutputTuple,
    RemoveLiquiditySingleSyEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquiditySingleToken"
  ): TypedContractEvent<
    RemoveLiquiditySingleTokenEvent.InputTuple,
    RemoveLiquiditySingleTokenEvent.OutputTuple,
    RemoveLiquiditySingleTokenEvent.OutputObject
  >;
  getEvent(
    key: "SwapPtAndSy"
  ): TypedContractEvent<
    SwapPtAndSyEvent.InputTuple,
    SwapPtAndSyEvent.OutputTuple,
    SwapPtAndSyEvent.OutputObject
  >;
  getEvent(
    key: "SwapPtAndToken"
  ): TypedContractEvent<
    SwapPtAndTokenEvent.InputTuple,
    SwapPtAndTokenEvent.OutputTuple,
    SwapPtAndTokenEvent.OutputObject
  >;
  getEvent(
    key: "SwapPtAndYt"
  ): TypedContractEvent<
    SwapPtAndYtEvent.InputTuple,
    SwapPtAndYtEvent.OutputTuple,
    SwapPtAndYtEvent.OutputObject
  >;
  getEvent(
    key: "SwapYtAndSy"
  ): TypedContractEvent<
    SwapYtAndSyEvent.InputTuple,
    SwapYtAndSyEvent.OutputTuple,
    SwapYtAndSyEvent.OutputObject
  >;
  getEvent(
    key: "SwapYtAndToken"
  ): TypedContractEvent<
    SwapYtAndTokenEvent.InputTuple,
    SwapYtAndTokenEvent.OutputTuple,
    SwapYtAndTokenEvent.OutputObject
  >;

  filters: {
    "AddLiquidityDualSyAndPt(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      AddLiquidityDualSyAndPtEvent.InputTuple,
      AddLiquidityDualSyAndPtEvent.OutputTuple,
      AddLiquidityDualSyAndPtEvent.OutputObject
    >;
    AddLiquidityDualSyAndPt: TypedContractEvent<
      AddLiquidityDualSyAndPtEvent.InputTuple,
      AddLiquidityDualSyAndPtEvent.OutputTuple,
      AddLiquidityDualSyAndPtEvent.OutputObject
    >;

    "AddLiquidityDualTokenAndPt(address,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      AddLiquidityDualTokenAndPtEvent.InputTuple,
      AddLiquidityDualTokenAndPtEvent.OutputTuple,
      AddLiquidityDualTokenAndPtEvent.OutputObject
    >;
    AddLiquidityDualTokenAndPt: TypedContractEvent<
      AddLiquidityDualTokenAndPtEvent.InputTuple,
      AddLiquidityDualTokenAndPtEvent.OutputTuple,
      AddLiquidityDualTokenAndPtEvent.OutputObject
    >;

    "AddLiquiditySinglePt(address,address,address,uint256,uint256)": TypedContractEvent<
      AddLiquiditySinglePtEvent.InputTuple,
      AddLiquiditySinglePtEvent.OutputTuple,
      AddLiquiditySinglePtEvent.OutputObject
    >;
    AddLiquiditySinglePt: TypedContractEvent<
      AddLiquiditySinglePtEvent.InputTuple,
      AddLiquiditySinglePtEvent.OutputTuple,
      AddLiquiditySinglePtEvent.OutputObject
    >;

    "AddLiquiditySingleSy(address,address,address,uint256,uint256)": TypedContractEvent<
      AddLiquiditySingleSyEvent.InputTuple,
      AddLiquiditySingleSyEvent.OutputTuple,
      AddLiquiditySingleSyEvent.OutputObject
    >;
    AddLiquiditySingleSy: TypedContractEvent<
      AddLiquiditySingleSyEvent.InputTuple,
      AddLiquiditySingleSyEvent.OutputTuple,
      AddLiquiditySingleSyEvent.OutputObject
    >;

    "AddLiquiditySingleSyKeepYt(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      AddLiquiditySingleSyKeepYtEvent.InputTuple,
      AddLiquiditySingleSyKeepYtEvent.OutputTuple,
      AddLiquiditySingleSyKeepYtEvent.OutputObject
    >;
    AddLiquiditySingleSyKeepYt: TypedContractEvent<
      AddLiquiditySingleSyKeepYtEvent.InputTuple,
      AddLiquiditySingleSyKeepYtEvent.OutputTuple,
      AddLiquiditySingleSyKeepYtEvent.OutputObject
    >;

    "AddLiquiditySingleToken(address,address,address,address,uint256,uint256)": TypedContractEvent<
      AddLiquiditySingleTokenEvent.InputTuple,
      AddLiquiditySingleTokenEvent.OutputTuple,
      AddLiquiditySingleTokenEvent.OutputObject
    >;
    AddLiquiditySingleToken: TypedContractEvent<
      AddLiquiditySingleTokenEvent.InputTuple,
      AddLiquiditySingleTokenEvent.OutputTuple,
      AddLiquiditySingleTokenEvent.OutputObject
    >;

    "AddLiquiditySingleTokenKeepYt(address,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      AddLiquiditySingleTokenKeepYtEvent.InputTuple,
      AddLiquiditySingleTokenKeepYtEvent.OutputTuple,
      AddLiquiditySingleTokenKeepYtEvent.OutputObject
    >;
    AddLiquiditySingleTokenKeepYt: TypedContractEvent<
      AddLiquiditySingleTokenKeepYtEvent.InputTuple,
      AddLiquiditySingleTokenKeepYtEvent.OutputTuple,
      AddLiquiditySingleTokenKeepYtEvent.OutputObject
    >;

    "MintPyFromSy(address,address,address,uint256,uint256)": TypedContractEvent<
      MintPyFromSyEvent.InputTuple,
      MintPyFromSyEvent.OutputTuple,
      MintPyFromSyEvent.OutputObject
    >;
    MintPyFromSy: TypedContractEvent<
      MintPyFromSyEvent.InputTuple,
      MintPyFromSyEvent.OutputTuple,
      MintPyFromSyEvent.OutputObject
    >;

    "MintPyFromToken(address,address,address,address,uint256,uint256)": TypedContractEvent<
      MintPyFromTokenEvent.InputTuple,
      MintPyFromTokenEvent.OutputTuple,
      MintPyFromTokenEvent.OutputObject
    >;
    MintPyFromToken: TypedContractEvent<
      MintPyFromTokenEvent.InputTuple,
      MintPyFromTokenEvent.OutputTuple,
      MintPyFromTokenEvent.OutputObject
    >;

    "MintSyFromToken(address,address,address,address,uint256,uint256)": TypedContractEvent<
      MintSyFromTokenEvent.InputTuple,
      MintSyFromTokenEvent.OutputTuple,
      MintSyFromTokenEvent.OutputObject
    >;
    MintSyFromToken: TypedContractEvent<
      MintSyFromTokenEvent.InputTuple,
      MintSyFromTokenEvent.OutputTuple,
      MintSyFromTokenEvent.OutputObject
    >;

    "RedeemPyToSy(address,address,address,uint256,uint256)": TypedContractEvent<
      RedeemPyToSyEvent.InputTuple,
      RedeemPyToSyEvent.OutputTuple,
      RedeemPyToSyEvent.OutputObject
    >;
    RedeemPyToSy: TypedContractEvent<
      RedeemPyToSyEvent.InputTuple,
      RedeemPyToSyEvent.OutputTuple,
      RedeemPyToSyEvent.OutputObject
    >;

    "RedeemPyToToken(address,address,address,address,uint256,uint256)": TypedContractEvent<
      RedeemPyToTokenEvent.InputTuple,
      RedeemPyToTokenEvent.OutputTuple,
      RedeemPyToTokenEvent.OutputObject
    >;
    RedeemPyToToken: TypedContractEvent<
      RedeemPyToTokenEvent.InputTuple,
      RedeemPyToTokenEvent.OutputTuple,
      RedeemPyToTokenEvent.OutputObject
    >;

    "RedeemSyToToken(address,address,address,address,uint256,uint256)": TypedContractEvent<
      RedeemSyToTokenEvent.InputTuple,
      RedeemSyToTokenEvent.OutputTuple,
      RedeemSyToTokenEvent.OutputObject
    >;
    RedeemSyToToken: TypedContractEvent<
      RedeemSyToTokenEvent.InputTuple,
      RedeemSyToTokenEvent.OutputTuple,
      RedeemSyToTokenEvent.OutputObject
    >;

    "RemoveLiquidityDualSyAndPt(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      RemoveLiquidityDualSyAndPtEvent.InputTuple,
      RemoveLiquidityDualSyAndPtEvent.OutputTuple,
      RemoveLiquidityDualSyAndPtEvent.OutputObject
    >;
    RemoveLiquidityDualSyAndPt: TypedContractEvent<
      RemoveLiquidityDualSyAndPtEvent.InputTuple,
      RemoveLiquidityDualSyAndPtEvent.OutputTuple,
      RemoveLiquidityDualSyAndPtEvent.OutputObject
    >;

    "RemoveLiquidityDualTokenAndPt(address,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      RemoveLiquidityDualTokenAndPtEvent.InputTuple,
      RemoveLiquidityDualTokenAndPtEvent.OutputTuple,
      RemoveLiquidityDualTokenAndPtEvent.OutputObject
    >;
    RemoveLiquidityDualTokenAndPt: TypedContractEvent<
      RemoveLiquidityDualTokenAndPtEvent.InputTuple,
      RemoveLiquidityDualTokenAndPtEvent.OutputTuple,
      RemoveLiquidityDualTokenAndPtEvent.OutputObject
    >;

    "RemoveLiquiditySinglePt(address,address,address,uint256,uint256)": TypedContractEvent<
      RemoveLiquiditySinglePtEvent.InputTuple,
      RemoveLiquiditySinglePtEvent.OutputTuple,
      RemoveLiquiditySinglePtEvent.OutputObject
    >;
    RemoveLiquiditySinglePt: TypedContractEvent<
      RemoveLiquiditySinglePtEvent.InputTuple,
      RemoveLiquiditySinglePtEvent.OutputTuple,
      RemoveLiquiditySinglePtEvent.OutputObject
    >;

    "RemoveLiquiditySingleSy(address,address,address,uint256,uint256)": TypedContractEvent<
      RemoveLiquiditySingleSyEvent.InputTuple,
      RemoveLiquiditySingleSyEvent.OutputTuple,
      RemoveLiquiditySingleSyEvent.OutputObject
    >;
    RemoveLiquiditySingleSy: TypedContractEvent<
      RemoveLiquiditySingleSyEvent.InputTuple,
      RemoveLiquiditySingleSyEvent.OutputTuple,
      RemoveLiquiditySingleSyEvent.OutputObject
    >;

    "RemoveLiquiditySingleToken(address,address,address,address,uint256,uint256)": TypedContractEvent<
      RemoveLiquiditySingleTokenEvent.InputTuple,
      RemoveLiquiditySingleTokenEvent.OutputTuple,
      RemoveLiquiditySingleTokenEvent.OutputObject
    >;
    RemoveLiquiditySingleToken: TypedContractEvent<
      RemoveLiquiditySingleTokenEvent.InputTuple,
      RemoveLiquiditySingleTokenEvent.OutputTuple,
      RemoveLiquiditySingleTokenEvent.OutputObject
    >;

    "SwapPtAndSy(address,address,address,int256,int256)": TypedContractEvent<
      SwapPtAndSyEvent.InputTuple,
      SwapPtAndSyEvent.OutputTuple,
      SwapPtAndSyEvent.OutputObject
    >;
    SwapPtAndSy: TypedContractEvent<
      SwapPtAndSyEvent.InputTuple,
      SwapPtAndSyEvent.OutputTuple,
      SwapPtAndSyEvent.OutputObject
    >;

    "SwapPtAndToken(address,address,address,address,int256,int256)": TypedContractEvent<
      SwapPtAndTokenEvent.InputTuple,
      SwapPtAndTokenEvent.OutputTuple,
      SwapPtAndTokenEvent.OutputObject
    >;
    SwapPtAndToken: TypedContractEvent<
      SwapPtAndTokenEvent.InputTuple,
      SwapPtAndTokenEvent.OutputTuple,
      SwapPtAndTokenEvent.OutputObject
    >;

    "SwapPtAndYt(address,address,address,int256,int256)": TypedContractEvent<
      SwapPtAndYtEvent.InputTuple,
      SwapPtAndYtEvent.OutputTuple,
      SwapPtAndYtEvent.OutputObject
    >;
    SwapPtAndYt: TypedContractEvent<
      SwapPtAndYtEvent.InputTuple,
      SwapPtAndYtEvent.OutputTuple,
      SwapPtAndYtEvent.OutputObject
    >;

    "SwapYtAndSy(address,address,address,int256,int256)": TypedContractEvent<
      SwapYtAndSyEvent.InputTuple,
      SwapYtAndSyEvent.OutputTuple,
      SwapYtAndSyEvent.OutputObject
    >;
    SwapYtAndSy: TypedContractEvent<
      SwapYtAndSyEvent.InputTuple,
      SwapYtAndSyEvent.OutputTuple,
      SwapYtAndSyEvent.OutputObject
    >;

    "SwapYtAndToken(address,address,address,address,int256,int256)": TypedContractEvent<
      SwapYtAndTokenEvent.InputTuple,
      SwapYtAndTokenEvent.OutputTuple,
      SwapYtAndTokenEvent.OutputObject
    >;
    SwapYtAndToken: TypedContractEvent<
      SwapYtAndTokenEvent.InputTuple,
      SwapYtAndTokenEvent.OutputTuple,
      SwapYtAndTokenEvent.OutputObject
    >;
  };
}
