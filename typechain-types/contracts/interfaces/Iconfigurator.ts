/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IconfiguratorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "becomeRedemptionProvider"
      | "distributeRewards"
      | "eUSDMiningIncentives"
      | "flashloanFee"
      | "getBadCollateralRatio"
      | "getEUSDAddress"
      | "getEUSDMaxLocked"
      | "getProtocolRewardsPool"
      | "getSafeCollateralRatio"
      | "getVaultWeight"
      | "hasRole"
      | "isRedemptionProvider"
      | "mintVault"
      | "mintVaultMaxSupply"
      | "peUSD"
      | "redemptionFee"
      | "refreshMintReward"
      | "stableToken"
      | "tokenMiner"
      | "vaultBurnPaused"
      | "vaultKeeperRatio"
      | "vaultMintFeeApy"
      | "vaultMintPaused"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "becomeRedemptionProvider",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eUSDMiningIncentives",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashloanFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBadCollateralRatio",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEUSDAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEUSDMaxLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolRewardsPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSafeCollateralRatio",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultWeight",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRedemptionProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVaultMaxSupply",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "peUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redemptionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refreshMintReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stableToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMiner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultBurnPaused",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultKeeperRatio",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultMintFeeApy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultMintPaused",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "becomeRedemptionProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eUSDMiningIncentives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashloanFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEUSDAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEUSDMaxLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolRewardsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSafeCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRedemptionProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintVaultMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "peUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshMintReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenMiner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultBurnPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultKeeperRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultMintFeeApy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultMintPaused",
    data: BytesLike
  ): Result;
}

export interface Iconfigurator extends BaseContract {
  connect(runner?: ContractRunner | null): Iconfigurator;
  waitForDeployment(): Promise<this>;

  interface: IconfiguratorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  becomeRedemptionProvider: TypedContractMethod<
    [_bool: boolean],
    [void],
    "nonpayable"
  >;

  distributeRewards: TypedContractMethod<[], [void], "nonpayable">;

  eUSDMiningIncentives: TypedContractMethod<[], [string], "view">;

  flashloanFee: TypedContractMethod<[], [bigint], "view">;

  getBadCollateralRatio: TypedContractMethod<
    [pool: AddressLike],
    [bigint],
    "view"
  >;

  getEUSDAddress: TypedContractMethod<[], [string], "view">;

  getEUSDMaxLocked: TypedContractMethod<[], [bigint], "view">;

  getProtocolRewardsPool: TypedContractMethod<[], [string], "view">;

  getSafeCollateralRatio: TypedContractMethod<
    [pool: AddressLike],
    [bigint],
    "view"
  >;

  getVaultWeight: TypedContractMethod<[pool: AddressLike], [bigint], "view">;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isRedemptionProvider: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  mintVault: TypedContractMethod<[pool: AddressLike], [boolean], "view">;

  mintVaultMaxSupply: TypedContractMethod<
    [pool: AddressLike],
    [bigint],
    "view"
  >;

  peUSD: TypedContractMethod<[], [string], "view">;

  redemptionFee: TypedContractMethod<[], [bigint], "view">;

  refreshMintReward: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  stableToken: TypedContractMethod<[], [string], "view">;

  tokenMiner: TypedContractMethod<[pool: AddressLike], [boolean], "view">;

  vaultBurnPaused: TypedContractMethod<[pool: AddressLike], [boolean], "view">;

  vaultKeeperRatio: TypedContractMethod<[pool: AddressLike], [bigint], "view">;

  vaultMintFeeApy: TypedContractMethod<[pool: AddressLike], [bigint], "view">;

  vaultMintPaused: TypedContractMethod<[pool: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "becomeRedemptionProvider"
  ): TypedContractMethod<[_bool: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributeRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eUSDMiningIncentives"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "flashloanFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBadCollateralRatio"
  ): TypedContractMethod<[pool: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEUSDAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEUSDMaxLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProtocolRewardsPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSafeCollateralRatio"
  ): TypedContractMethod<[pool: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultWeight"
  ): TypedContractMethod<[pool: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRedemptionProvider"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintVault"
  ): TypedContractMethod<[pool: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintVaultMaxSupply"
  ): TypedContractMethod<[pool: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "peUSD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redemptionFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refreshMintReward"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stableToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenMiner"
  ): TypedContractMethod<[pool: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "vaultBurnPaused"
  ): TypedContractMethod<[pool: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "vaultKeeperRatio"
  ): TypedContractMethod<[pool: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "vaultMintFeeApy"
  ): TypedContractMethod<[pool: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "vaultMintPaused"
  ): TypedContractMethod<[pool: AddressLike], [boolean], "view">;

  filters: {};
}
