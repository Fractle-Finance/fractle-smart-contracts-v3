/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type SwapDataStruct = {
  swapType: BigNumberish;
  extRouter: AddressLike;
  extCalldata: BytesLike;
  needScale: boolean;
};

export type SwapDataStructOutput = [
  swapType: bigint,
  extRouter: string,
  extCalldata: string,
  needScale: boolean
] & {
  swapType: bigint;
  extRouter: string;
  extCalldata: string;
  needScale: boolean;
};

export type TokenOutputStruct = {
  tokenOut: AddressLike;
  minTokenOut: BigNumberish;
  tokenRedeemSy: AddressLike;
  bulk: AddressLike;
  euphratesSwap: AddressLike;
  swapData: SwapDataStruct;
};

export type TokenOutputStructOutput = [
  tokenOut: string,
  minTokenOut: bigint,
  tokenRedeemSy: string,
  bulk: string,
  euphratesSwap: string,
  swapData: SwapDataStructOutput
] & {
  tokenOut: string;
  minTokenOut: bigint;
  tokenRedeemSy: string;
  bulk: string;
  euphratesSwap: string;
  swapData: SwapDataStructOutput;
};

export type ApproxParamsStruct = {
  guessMin: BigNumberish;
  guessMax: BigNumberish;
  guessOffchain: BigNumberish;
  maxIteration: BigNumberish;
  eps: BigNumberish;
};

export type ApproxParamsStructOutput = [
  guessMin: bigint,
  guessMax: bigint,
  guessOffchain: bigint,
  maxIteration: bigint,
  eps: bigint
] & {
  guessMin: bigint;
  guessMax: bigint;
  guessOffchain: bigint;
  maxIteration: bigint;
  eps: bigint;
};

export declare namespace IPRouterHelper {
  export type RemoveLiquiditySingleSyStructStruct = {
    market: AddressLike;
    netLpToRemove: BigNumberish;
    doRedeemRewards: boolean;
  };

  export type RemoveLiquiditySingleSyStructStructOutput = [
    market: string,
    netLpToRemove: bigint,
    doRedeemRewards: boolean
  ] & { market: string; netLpToRemove: bigint; doRedeemRewards: boolean };

  export type RemoveLiquiditySingleTokenStructStruct = {
    market: AddressLike;
    netLpToRemove: BigNumberish;
    doRedeemRewards: boolean;
    output: TokenOutputStruct;
  };

  export type RemoveLiquiditySingleTokenStructStructOutput = [
    market: string,
    netLpToRemove: bigint,
    doRedeemRewards: boolean,
    output: TokenOutputStructOutput
  ] & {
    market: string;
    netLpToRemove: bigint;
    doRedeemRewards: boolean;
    output: TokenOutputStructOutput;
  };

  export type AddLiquiditySingleTokenKeepYtStructStruct = {
    market: AddressLike;
    minLpOut: BigNumberish;
    minYtOut: BigNumberish;
    bulk: AddressLike;
  };

  export type AddLiquiditySingleTokenKeepYtStructStructOutput = [
    market: string,
    minLpOut: bigint,
    minYtOut: bigint,
    bulk: string
  ] & { market: string; minLpOut: bigint; minYtOut: bigint; bulk: string };

  export type AddLiquiditySingleTokenStructStruct = {
    market: AddressLike;
    minLpOut: BigNumberish;
    guessNetTokenIn: BigNumberish;
    guessPtReceivedFromSy: ApproxParamsStruct;
    bulk: AddressLike;
  };

  export type AddLiquiditySingleTokenStructStructOutput = [
    market: string,
    minLpOut: bigint,
    guessNetTokenIn: bigint,
    guessPtReceivedFromSy: ApproxParamsStructOutput,
    bulk: string
  ] & {
    market: string;
    minLpOut: bigint;
    guessNetTokenIn: bigint;
    guessPtReceivedFromSy: ApproxParamsStructOutput;
    bulk: string;
  };

  export type AddLiquiditySingleSyKeepYtStructStruct = {
    market: AddressLike;
    minLpOut: BigNumberish;
    minYtOut: BigNumberish;
  };

  export type AddLiquiditySingleSyKeepYtStructStructOutput = [
    market: string,
    minLpOut: bigint,
    minYtOut: bigint
  ] & { market: string; minLpOut: bigint; minYtOut: bigint };

  export type AddLiquiditySingleSyStructStruct = {
    market: AddressLike;
    minLpOut: BigNumberish;
    guessNetSyIn: BigNumberish;
    guessPtReceivedFromSy: ApproxParamsStruct;
  };

  export type AddLiquiditySingleSyStructStructOutput = [
    market: string,
    minLpOut: bigint,
    guessNetSyIn: bigint,
    guessPtReceivedFromSy: ApproxParamsStructOutput
  ] & {
    market: string;
    minLpOut: bigint;
    guessNetSyIn: bigint;
    guessPtReceivedFromSy: ApproxParamsStructOutput;
  };
}

export interface IPRouterHelperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "removeLiquiditySingleSy"
      | "removeLiquiditySingleToken"
      | "transferLiquidityDifferentSyKeepYt"
      | "transferLiquidityDifferentSyNormal"
      | "transferLiquiditySameSyKeepYt"
      | "transferLiquiditySameSyNormal"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddLiquiditySingleSy"
      | "AddLiquiditySingleSyKeepYt"
      | "AddLiquiditySingleToken"
      | "AddLiquiditySingleTokenKeepYt"
      | "RemoveLiquiditySingleSy"
      | "RemoveLiquiditySingleToken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "removeLiquiditySingleSy",
    values: [IPRouterHelper.RemoveLiquiditySingleSyStructStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySingleToken",
    values: [IPRouterHelper.RemoveLiquiditySingleTokenStructStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLiquidityDifferentSyKeepYt",
    values: [
      IPRouterHelper.RemoveLiquiditySingleTokenStructStruct,
      IPRouterHelper.AddLiquiditySingleTokenKeepYtStructStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLiquidityDifferentSyNormal",
    values: [
      IPRouterHelper.RemoveLiquiditySingleTokenStructStruct,
      IPRouterHelper.AddLiquiditySingleTokenStructStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLiquiditySameSyKeepYt",
    values: [
      IPRouterHelper.RemoveLiquiditySingleSyStructStruct,
      IPRouterHelper.AddLiquiditySingleSyKeepYtStructStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLiquiditySameSyNormal",
    values: [
      IPRouterHelper.RemoveLiquiditySingleSyStructStruct,
      IPRouterHelper.AddLiquiditySingleSyStructStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "removeLiquiditySingleSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySingleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLiquidityDifferentSyKeepYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLiquidityDifferentSyNormal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLiquiditySameSyKeepYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLiquiditySameSyNormal",
    data: BytesLike
  ): Result;
}

export namespace AddLiquiditySingleSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netSyIn: BigNumberish,
    netLpOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netSyIn: bigint,
    netLpOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netSyIn: bigint;
    netLpOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquiditySingleSyKeepYtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netSyIn: BigNumberish,
    netLpOut: BigNumberish,
    netYtOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netSyIn: bigint,
    netLpOut: bigint,
    netYtOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netSyIn: bigint;
    netLpOut: bigint;
    netYtOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquiditySingleTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netTokenIn: BigNumberish,
    netLpOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netTokenIn: bigint,
    netLpOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netTokenIn: bigint;
    netLpOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquiditySingleTokenKeepYtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netTokenIn: BigNumberish,
    netLpOut: BigNumberish,
    netYtOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netTokenIn: bigint,
    netLpOut: bigint,
    netYtOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netTokenIn: bigint;
    netLpOut: bigint;
    netYtOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquiditySingleSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netLpToRemove: BigNumberish,
    netSyOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netLpToRemove: bigint,
    netSyOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netLpToRemove: bigint;
    netSyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquiditySingleTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netLpToRemove: BigNumberish,
    netTokenOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netLpToRemove: bigint,
    netTokenOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netLpToRemove: bigint;
    netTokenOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPRouterHelper extends BaseContract {
  connect(runner?: ContractRunner | null): IPRouterHelper;
  waitForDeployment(): Promise<this>;

  interface: IPRouterHelperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  removeLiquiditySingleSy: TypedContractMethod<
    [fromMarket: IPRouterHelper.RemoveLiquiditySingleSyStructStruct],
    [[bigint, bigint] & { netSyOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  removeLiquiditySingleToken: TypedContractMethod<
    [fromMarket: IPRouterHelper.RemoveLiquiditySingleTokenStructStruct],
    [[bigint, bigint] & { netTokenOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  transferLiquidityDifferentSyKeepYt: TypedContractMethod<
    [
      fromMarket: IPRouterHelper.RemoveLiquiditySingleTokenStructStruct,
      toMarket: IPRouterHelper.AddLiquiditySingleTokenKeepYtStructStruct
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netYtOut: bigint;
        netTokenZapIn: bigint;
        netSyFeeOfRemove: bigint;
      }
    ],
    "nonpayable"
  >;

  transferLiquidityDifferentSyNormal: TypedContractMethod<
    [
      fromMarket: IPRouterHelper.RemoveLiquiditySingleTokenStructStruct,
      toMarket: IPRouterHelper.AddLiquiditySingleTokenStructStruct
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netTokenZapIn: bigint;
        netSyFeeOfRemove: bigint;
        netSyFeeOfAdd: bigint;
      }
    ],
    "nonpayable"
  >;

  transferLiquiditySameSyKeepYt: TypedContractMethod<
    [
      fromMarket: IPRouterHelper.RemoveLiquiditySingleSyStructStruct,
      toMarket: IPRouterHelper.AddLiquiditySingleSyKeepYtStructStruct
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netYtOut: bigint;
        netSyZapIn: bigint;
        netSyFeeOfRemove: bigint;
      }
    ],
    "nonpayable"
  >;

  transferLiquiditySameSyNormal: TypedContractMethod<
    [
      fromMarket: IPRouterHelper.RemoveLiquiditySingleSyStructStruct,
      toMarket: IPRouterHelper.AddLiquiditySingleSyStructStruct
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netSyZapIn: bigint;
        netSyFeeOfRemove: bigint;
        netSyFeeOfAdd: bigint;
      }
    ],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "removeLiquiditySingleSy"
  ): TypedContractMethod<
    [fromMarket: IPRouterHelper.RemoveLiquiditySingleSyStructStruct],
    [[bigint, bigint] & { netSyOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquiditySingleToken"
  ): TypedContractMethod<
    [fromMarket: IPRouterHelper.RemoveLiquiditySingleTokenStructStruct],
    [[bigint, bigint] & { netTokenOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferLiquidityDifferentSyKeepYt"
  ): TypedContractMethod<
    [
      fromMarket: IPRouterHelper.RemoveLiquiditySingleTokenStructStruct,
      toMarket: IPRouterHelper.AddLiquiditySingleTokenKeepYtStructStruct
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netYtOut: bigint;
        netTokenZapIn: bigint;
        netSyFeeOfRemove: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferLiquidityDifferentSyNormal"
  ): TypedContractMethod<
    [
      fromMarket: IPRouterHelper.RemoveLiquiditySingleTokenStructStruct,
      toMarket: IPRouterHelper.AddLiquiditySingleTokenStructStruct
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netTokenZapIn: bigint;
        netSyFeeOfRemove: bigint;
        netSyFeeOfAdd: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferLiquiditySameSyKeepYt"
  ): TypedContractMethod<
    [
      fromMarket: IPRouterHelper.RemoveLiquiditySingleSyStructStruct,
      toMarket: IPRouterHelper.AddLiquiditySingleSyKeepYtStructStruct
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netYtOut: bigint;
        netSyZapIn: bigint;
        netSyFeeOfRemove: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferLiquiditySameSyNormal"
  ): TypedContractMethod<
    [
      fromMarket: IPRouterHelper.RemoveLiquiditySingleSyStructStruct,
      toMarket: IPRouterHelper.AddLiquiditySingleSyStructStruct
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netSyZapIn: bigint;
        netSyFeeOfRemove: bigint;
        netSyFeeOfAdd: bigint;
      }
    ],
    "nonpayable"
  >;

  getEvent(
    key: "AddLiquiditySingleSy"
  ): TypedContractEvent<
    AddLiquiditySingleSyEvent.InputTuple,
    AddLiquiditySingleSyEvent.OutputTuple,
    AddLiquiditySingleSyEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquiditySingleSyKeepYt"
  ): TypedContractEvent<
    AddLiquiditySingleSyKeepYtEvent.InputTuple,
    AddLiquiditySingleSyKeepYtEvent.OutputTuple,
    AddLiquiditySingleSyKeepYtEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquiditySingleToken"
  ): TypedContractEvent<
    AddLiquiditySingleTokenEvent.InputTuple,
    AddLiquiditySingleTokenEvent.OutputTuple,
    AddLiquiditySingleTokenEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquiditySingleTokenKeepYt"
  ): TypedContractEvent<
    AddLiquiditySingleTokenKeepYtEvent.InputTuple,
    AddLiquiditySingleTokenKeepYtEvent.OutputTuple,
    AddLiquiditySingleTokenKeepYtEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquiditySingleSy"
  ): TypedContractEvent<
    RemoveLiquiditySingleSyEvent.InputTuple,
    RemoveLiquiditySingleSyEvent.OutputTuple,
    RemoveLiquiditySingleSyEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquiditySingleToken"
  ): TypedContractEvent<
    RemoveLiquiditySingleTokenEvent.InputTuple,
    RemoveLiquiditySingleTokenEvent.OutputTuple,
    RemoveLiquiditySingleTokenEvent.OutputObject
  >;

  filters: {
    "AddLiquiditySingleSy(address,address,address,uint256,uint256)": TypedContractEvent<
      AddLiquiditySingleSyEvent.InputTuple,
      AddLiquiditySingleSyEvent.OutputTuple,
      AddLiquiditySingleSyEvent.OutputObject
    >;
    AddLiquiditySingleSy: TypedContractEvent<
      AddLiquiditySingleSyEvent.InputTuple,
      AddLiquiditySingleSyEvent.OutputTuple,
      AddLiquiditySingleSyEvent.OutputObject
    >;

    "AddLiquiditySingleSyKeepYt(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      AddLiquiditySingleSyKeepYtEvent.InputTuple,
      AddLiquiditySingleSyKeepYtEvent.OutputTuple,
      AddLiquiditySingleSyKeepYtEvent.OutputObject
    >;
    AddLiquiditySingleSyKeepYt: TypedContractEvent<
      AddLiquiditySingleSyKeepYtEvent.InputTuple,
      AddLiquiditySingleSyKeepYtEvent.OutputTuple,
      AddLiquiditySingleSyKeepYtEvent.OutputObject
    >;

    "AddLiquiditySingleToken(address,address,address,address,uint256,uint256)": TypedContractEvent<
      AddLiquiditySingleTokenEvent.InputTuple,
      AddLiquiditySingleTokenEvent.OutputTuple,
      AddLiquiditySingleTokenEvent.OutputObject
    >;
    AddLiquiditySingleToken: TypedContractEvent<
      AddLiquiditySingleTokenEvent.InputTuple,
      AddLiquiditySingleTokenEvent.OutputTuple,
      AddLiquiditySingleTokenEvent.OutputObject
    >;

    "AddLiquiditySingleTokenKeepYt(address,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      AddLiquiditySingleTokenKeepYtEvent.InputTuple,
      AddLiquiditySingleTokenKeepYtEvent.OutputTuple,
      AddLiquiditySingleTokenKeepYtEvent.OutputObject
    >;
    AddLiquiditySingleTokenKeepYt: TypedContractEvent<
      AddLiquiditySingleTokenKeepYtEvent.InputTuple,
      AddLiquiditySingleTokenKeepYtEvent.OutputTuple,
      AddLiquiditySingleTokenKeepYtEvent.OutputObject
    >;

    "RemoveLiquiditySingleSy(address,address,address,uint256,uint256)": TypedContractEvent<
      RemoveLiquiditySingleSyEvent.InputTuple,
      RemoveLiquiditySingleSyEvent.OutputTuple,
      RemoveLiquiditySingleSyEvent.OutputObject
    >;
    RemoveLiquiditySingleSy: TypedContractEvent<
      RemoveLiquiditySingleSyEvent.InputTuple,
      RemoveLiquiditySingleSyEvent.OutputTuple,
      RemoveLiquiditySingleSyEvent.OutputObject
    >;

    "RemoveLiquiditySingleToken(address,address,address,address,uint256,uint256)": TypedContractEvent<
      RemoveLiquiditySingleTokenEvent.InputTuple,
      RemoveLiquiditySingleTokenEvent.OutputTuple,
      RemoveLiquiditySingleTokenEvent.OutputObject
    >;
    RemoveLiquiditySingleToken: TypedContractEvent<
      RemoveLiquiditySingleTokenEvent.InputTuple,
      RemoveLiquiditySingleTokenEvent.OutputTuple,
      RemoveLiquiditySingleTokenEvent.OutputObject
    >;
  };
}
