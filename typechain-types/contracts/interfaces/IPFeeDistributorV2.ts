/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IPFeeDistributorV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimProtocol"
      | "claimRetail"
      | "getProtocolClaimables"
      | "getProtocolTotalAccrued"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claimed"
      | "SetMerkleRootAndFund"
      | "UpdateProtocolClaimable"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimProtocol",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRetail",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolClaimables",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolTotalAccrued",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolClaimables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolTotalAccrued",
    data: BytesLike
  ): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [user: AddressLike, amountOut: BigNumberish];
  export type OutputTuple = [user: string, amountOut: bigint];
  export interface OutputObject {
    user: string;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMerkleRootAndFundEvent {
  export type InputTuple = [merkleRoot: BytesLike, amountFunded: BigNumberish];
  export type OutputTuple = [merkleRoot: string, amountFunded: bigint];
  export interface OutputObject {
    merkleRoot: string;
    amountFunded: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateProtocolClaimableEvent {
  export type InputTuple = [user: AddressLike, sumTopUp: BigNumberish];
  export type OutputTuple = [user: string, sumTopUp: bigint];
  export interface OutputObject {
    user: string;
    sumTopUp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPFeeDistributorV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IPFeeDistributorV2;
  waitForDeployment(): Promise<this>;

  interface: IPFeeDistributorV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimProtocol: TypedContractMethod<
    [receiver: AddressLike, pools: AddressLike[]],
    [[bigint, bigint[]] & { totalAmountOut: bigint; amountsOut: bigint[] }],
    "nonpayable"
  >;

  claimRetail: TypedContractMethod<
    [receiver: AddressLike, totalAccrued: BigNumberish, proof: BytesLike[]],
    [bigint],
    "nonpayable"
  >;

  getProtocolClaimables: TypedContractMethod<
    [user: AddressLike, pools: AddressLike[]],
    [bigint[]],
    "view"
  >;

  getProtocolTotalAccrued: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimProtocol"
  ): TypedContractMethod<
    [receiver: AddressLike, pools: AddressLike[]],
    [[bigint, bigint[]] & { totalAmountOut: bigint; amountsOut: bigint[] }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRetail"
  ): TypedContractMethod<
    [receiver: AddressLike, totalAccrued: BigNumberish, proof: BytesLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProtocolClaimables"
  ): TypedContractMethod<
    [user: AddressLike, pools: AddressLike[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProtocolTotalAccrued"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "SetMerkleRootAndFund"
  ): TypedContractEvent<
    SetMerkleRootAndFundEvent.InputTuple,
    SetMerkleRootAndFundEvent.OutputTuple,
    SetMerkleRootAndFundEvent.OutputObject
  >;
  getEvent(
    key: "UpdateProtocolClaimable"
  ): TypedContractEvent<
    UpdateProtocolClaimableEvent.InputTuple,
    UpdateProtocolClaimableEvent.OutputTuple,
    UpdateProtocolClaimableEvent.OutputObject
  >;

  filters: {
    "Claimed(address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "SetMerkleRootAndFund(bytes32,uint256)": TypedContractEvent<
      SetMerkleRootAndFundEvent.InputTuple,
      SetMerkleRootAndFundEvent.OutputTuple,
      SetMerkleRootAndFundEvent.OutputObject
    >;
    SetMerkleRootAndFund: TypedContractEvent<
      SetMerkleRootAndFundEvent.InputTuple,
      SetMerkleRootAndFundEvent.OutputTuple,
      SetMerkleRootAndFundEvent.OutputObject
    >;

    "UpdateProtocolClaimable(address,uint256)": TypedContractEvent<
      UpdateProtocolClaimableEvent.InputTuple,
      UpdateProtocolClaimableEvent.OutputTuple,
      UpdateProtocolClaimableEvent.OutputObject
    >;
    UpdateProtocolClaimable: TypedContractEvent<
      UpdateProtocolClaimableEvent.InputTuple,
      UpdateProtocolClaimableEvent.OutputTuple,
      UpdateProtocolClaimableEvent.OutputObject
    >;
  };
}
