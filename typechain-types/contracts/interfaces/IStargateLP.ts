/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IStargateLP {
  export type SwapObjStruct = {
    amount: BigNumberish;
    eqFee: BigNumberish;
    eqReward: BigNumberish;
    lpFee: BigNumberish;
    protocolFee: BigNumberish;
    lkbRemove: BigNumberish;
  };

  export type SwapObjStructOutput = [
    amount: bigint,
    eqFee: bigint,
    eqReward: bigint,
    lpFee: bigint,
    protocolFee: bigint,
    lkbRemove: bigint
  ] & {
    amount: bigint;
    eqFee: bigint;
    eqReward: bigint;
    lpFee: bigint;
    protocolFee: bigint;
    lkbRemove: bigint;
  };
}

export interface IStargateLPInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "amountLPtoLD"
      | "convertRate"
      | "deltaCredit"
      | "mintFeeBP"
      | "poolId"
      | "router"
      | "swapRemote"
      | "token"
      | "totalLiquidity"
      | "totalSupply"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "amountLPtoLD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deltaCredit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mintFeeBP", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolId", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapRemote",
    values: [BigNumberish, BigNumberish, AddressLike, IStargateLP.SwapObjStruct]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "amountLPtoLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deltaCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintFeeBP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRemote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
}

export interface IStargateLP extends BaseContract {
  connect(runner?: ContractRunner | null): IStargateLP;
  waitForDeployment(): Promise<this>;

  interface: IStargateLPInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  amountLPtoLD: TypedContractMethod<
    [_amountLP: BigNumberish],
    [bigint],
    "view"
  >;

  convertRate: TypedContractMethod<[], [bigint], "view">;

  deltaCredit: TypedContractMethod<[], [bigint], "view">;

  mintFeeBP: TypedContractMethod<[], [bigint], "view">;

  poolId: TypedContractMethod<[], [bigint], "view">;

  router: TypedContractMethod<[], [string], "view">;

  swapRemote: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcPoolId: BigNumberish,
      _to: AddressLike,
      _s: IStargateLP.SwapObjStruct
    ],
    [bigint],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  totalLiquidity: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "amountLPtoLD"
  ): TypedContractMethod<[_amountLP: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deltaCredit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintFeeBP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapRemote"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcPoolId: BigNumberish,
      _to: AddressLike,
      _s: IStargateLP.SwapObjStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
