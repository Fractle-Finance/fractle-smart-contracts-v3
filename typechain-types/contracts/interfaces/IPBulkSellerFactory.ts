/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IPBulkSellerFactoryInterface extends Interface {
  getFunction(nameOrSignature: "get" | "isMaintainer"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BulkSellerCreated" | "UpgradedBeacon"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "get",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMaintainer",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMaintainer",
    data: BytesLike
  ): Result;
}

export namespace BulkSellerCreatedEvent {
  export type InputTuple = [
    token: AddressLike,
    sy: AddressLike,
    bulk: AddressLike
  ];
  export type OutputTuple = [token: string, sy: string, bulk: string];
  export interface OutputObject {
    token: string;
    sy: string;
    bulk: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedBeaconEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPBulkSellerFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IPBulkSellerFactory;
  waitForDeployment(): Promise<this>;

  interface: IPBulkSellerFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  get: TypedContractMethod<
    [token: AddressLike, SY: AddressLike],
    [string],
    "view"
  >;

  isMaintainer: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "get"
  ): TypedContractMethod<
    [token: AddressLike, SY: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMaintainer"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  getEvent(
    key: "BulkSellerCreated"
  ): TypedContractEvent<
    BulkSellerCreatedEvent.InputTuple,
    BulkSellerCreatedEvent.OutputTuple,
    BulkSellerCreatedEvent.OutputObject
  >;
  getEvent(
    key: "UpgradedBeacon"
  ): TypedContractEvent<
    UpgradedBeaconEvent.InputTuple,
    UpgradedBeaconEvent.OutputTuple,
    UpgradedBeaconEvent.OutputObject
  >;

  filters: {
    "BulkSellerCreated(address,address,address)": TypedContractEvent<
      BulkSellerCreatedEvent.InputTuple,
      BulkSellerCreatedEvent.OutputTuple,
      BulkSellerCreatedEvent.OutputObject
    >;
    BulkSellerCreated: TypedContractEvent<
      BulkSellerCreatedEvent.InputTuple,
      BulkSellerCreatedEvent.OutputTuple,
      BulkSellerCreatedEvent.OutputObject
    >;

    "UpgradedBeacon(address)": TypedContractEvent<
      UpgradedBeaconEvent.InputTuple,
      UpgradedBeaconEvent.OutputTuple,
      UpgradedBeaconEvent.OutputObject
    >;
    UpgradedBeacon: TypedContractEvent<
      UpgradedBeaconEvent.InputTuple,
      UpgradedBeaconEvent.OutputTuple,
      UpgradedBeaconEvent.OutputObject
    >;
  };
}
