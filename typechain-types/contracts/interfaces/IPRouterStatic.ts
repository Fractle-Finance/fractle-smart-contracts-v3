/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ApproxParamsStruct = {
  guessMin: BigNumberish;
  guessMax: BigNumberish;
  guessOffchain: BigNumberish;
  maxIteration: BigNumberish;
  eps: BigNumberish;
};

export type ApproxParamsStructOutput = [
  guessMin: bigint,
  guessMax: bigint,
  guessOffchain: bigint,
  maxIteration: bigint,
  eps: bigint
] & {
  guessMin: bigint;
  guessMax: bigint;
  guessOffchain: bigint;
  maxIteration: bigint;
  eps: bigint;
};

export type MarketStateStruct = {
  totalPt: BigNumberish;
  totalSy: BigNumberish;
  totalLp: BigNumberish;
  treasury: AddressLike;
  scalarRoot: BigNumberish;
  expiry: BigNumberish;
  lifecircle: BigNumberish;
  lnFeeRateRoot: BigNumberish;
  reserveFeePercent: BigNumberish;
  lastLnImpliedRate: BigNumberish;
};

export type MarketStateStructOutput = [
  totalPt: bigint,
  totalSy: bigint,
  totalLp: bigint,
  treasury: string,
  scalarRoot: bigint,
  expiry: bigint,
  lifecircle: bigint,
  lnFeeRateRoot: bigint,
  reserveFeePercent: bigint,
  lastLnImpliedRate: bigint
] & {
  totalPt: bigint;
  totalSy: bigint;
  totalLp: bigint;
  treasury: string;
  scalarRoot: bigint;
  expiry: bigint;
  lifecircle: bigint;
  lnFeeRateRoot: bigint;
  reserveFeePercent: bigint;
  lastLnImpliedRate: bigint;
};

export declare namespace IPActionInfoStatic {
  export type TokenAmountStruct = { token: AddressLike; amount: BigNumberish };

  export type TokenAmountStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type UserMarketInfoStruct = {
    lpBalance: IPActionInfoStatic.TokenAmountStruct;
    ptBalance: IPActionInfoStatic.TokenAmountStruct;
    syBalance: IPActionInfoStatic.TokenAmountStruct;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStruct[];
  };

  export type UserMarketInfoStructOutput = [
    lpBalance: IPActionInfoStatic.TokenAmountStructOutput,
    ptBalance: IPActionInfoStatic.TokenAmountStructOutput,
    syBalance: IPActionInfoStatic.TokenAmountStructOutput,
    unclaimedRewards: IPActionInfoStatic.TokenAmountStructOutput[]
  ] & {
    lpBalance: IPActionInfoStatic.TokenAmountStructOutput;
    ptBalance: IPActionInfoStatic.TokenAmountStructOutput;
    syBalance: IPActionInfoStatic.TokenAmountStructOutput;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStructOutput[];
  };

  export type UserPYInfoStruct = {
    ptBalance: IPActionInfoStatic.TokenAmountStruct;
    ytBalance: IPActionInfoStatic.TokenAmountStruct;
    unclaimedInterest: IPActionInfoStatic.TokenAmountStruct;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStruct[];
  };

  export type UserPYInfoStructOutput = [
    ptBalance: IPActionInfoStatic.TokenAmountStructOutput,
    ytBalance: IPActionInfoStatic.TokenAmountStructOutput,
    unclaimedInterest: IPActionInfoStatic.TokenAmountStructOutput,
    unclaimedRewards: IPActionInfoStatic.TokenAmountStructOutput[]
  ] & {
    ptBalance: IPActionInfoStatic.TokenAmountStructOutput;
    ytBalance: IPActionInfoStatic.TokenAmountStructOutput;
    unclaimedInterest: IPActionInfoStatic.TokenAmountStructOutput;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStructOutput[];
  };

  export type UserSYInfoStruct = {
    syBalance: IPActionInfoStatic.TokenAmountStruct;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStruct[];
  };

  export type UserSYInfoStructOutput = [
    syBalance: IPActionInfoStatic.TokenAmountStructOutput,
    unclaimedRewards: IPActionInfoStatic.TokenAmountStructOutput[]
  ] & {
    syBalance: IPActionInfoStatic.TokenAmountStructOutput;
    unclaimedRewards: IPActionInfoStatic.TokenAmountStructOutput[];
  };
}

export declare namespace IPMiniDiamond {
  export type SelectorsToFacetStruct = {
    facet: AddressLike;
    selectors: BytesLike[];
  };

  export type SelectorsToFacetStructOutput = [
    facet: string,
    selectors: string[]
  ] & { facet: string; selectors: string[] };
}

export interface IPRouterStaticInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidityDualSyAndPtStatic"
      | "addLiquidityDualTokenAndPtStatic"
      | "addLiquiditySinglePtStatic"
      | "addLiquiditySingleSyKeepYtStatic"
      | "addLiquiditySingleSyStatic"
      | "addLiquiditySingleTokenKeepYtStatic"
      | "addLiquiditySingleTokenStatic"
      | "calcPriceImpactPY"
      | "calcPriceImpactPt"
      | "calcPriceImpactYt"
      | "claimOwnership"
      | "facetAddress"
      | "getAmountTokenToMintSy"
      | "getBulkSellerFactory"
      | "getBulkSellerInfo"
      | "getDefaultApproxParams"
      | "getLpToAssetRate"
      | "getLpToSyRate"
      | "getMarketState"
      | "getOwnerAndPendingOwner"
      | "getPY"
      | "getPtToAssetRate"
      | "getPtToSyRate"
      | "getTokensInOut"
      | "getTradeExchangeRateExcludeFee"
      | "getTradeExchangeRateIncludeFee"
      | "getUserMarketInfo"
      | "getUserPYInfo"
      | "getUserSYInfo"
      | "increaseLockPositionStatic"
      | "mintPyFromSyStatic"
      | "mintPyFromTokenStatic"
      | "mintSyFromTokenStatic"
      | "pyIndexCurrentViewMarket"
      | "pyIndexCurrentViewYt"
      | "redeemPyToSyStatic"
      | "redeemPyToTokenStatic"
      | "redeemSyToTokenStatic"
      | "removeLiquidityDualSyAndPtStatic"
      | "removeLiquidityDualTokenAndPtStatic"
      | "removeLiquiditySinglePtStatic"
      | "removeLiquiditySingleSyStatic"
      | "removeLiquiditySingleTokenStatic"
      | "setBulkSellerFactory"
      | "setDefaultApproxParams"
      | "setFacetForSelectors"
      | "swapExactPtForSyStatic"
      | "swapExactPtForTokenStatic"
      | "swapExactPtForYtStatic"
      | "swapExactSyForPtStatic"
      | "swapExactSyForYtStatic"
      | "swapExactTokenForPtStatic"
      | "swapExactTokenForYtStatic"
      | "swapExactYtForPtStatic"
      | "swapExactYtForSyStatic"
      | "swapExactYtForTokenStatic"
      | "swapPtForExactSyStatic"
      | "swapSyForExactPtStatic"
      | "swapSyForExactYtStatic"
      | "swapYtForExactSyStatic"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "addLiquidityDualSyAndPtStatic",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityDualTokenAndPtStatic",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySinglePtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleSyKeepYtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleTokenKeepYtStatic",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquiditySingleTokenStatic",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPriceImpactPY",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPriceImpactPt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPriceImpactYt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountTokenToMintSy",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBulkSellerFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBulkSellerInfo",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultApproxParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLpToAssetRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpToSyRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerAndPendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPY", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getPtToAssetRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPtToSyRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensInOut",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeExchangeRateExcludeFee",
    values: [AddressLike, MarketStateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeExchangeRateIncludeFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMarketInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPYInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSYInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLockPositionStatic",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPyFromSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPyFromTokenStatic",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSyFromTokenStatic",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pyIndexCurrentViewMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pyIndexCurrentViewYt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPyToSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPyToTokenStatic",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemSyToTokenStatic",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityDualSyAndPtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityDualTokenAndPtStatic",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySinglePtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySingleSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquiditySingleTokenStatic",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBulkSellerFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultApproxParams",
    values: [ApproxParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFacetForSelectors",
    values: [IPMiniDiamond.SelectorsToFacetStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForTokenStatic",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForYtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForPtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForYtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForPtStatic",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForYtStatic",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForPtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactYtForTokenStatic",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPtForExactSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSyForExactPtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSyForExactYtStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapYtForExactSyStatic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike, boolean, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidityDualSyAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityDualTokenAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySinglePtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleSyKeepYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleTokenKeepYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquiditySingleTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPriceImpactPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPriceImpactPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPriceImpactYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountTokenToMintSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBulkSellerFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBulkSellerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultApproxParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpToAssetRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpToSyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerAndPendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPtToAssetRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPtToSyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensInOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeExchangeRateExcludeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeExchangeRateIncludeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPYInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSYInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLockPositionStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPyFromSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPyFromTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintSyFromTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pyIndexCurrentViewMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pyIndexCurrentViewYt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPyToSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPyToTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemSyToTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityDualSyAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityDualTokenAndPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySinglePtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySingleSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquiditySingleTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBulkSellerFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultApproxParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFacetForSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactYtForTokenStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPtForExactSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSyForExactPtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSyForExactYtStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapYtForExactSyStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPRouterStatic extends BaseContract {
  connect(runner?: ContractRunner | null): IPRouterStatic;
  waitForDeployment(): Promise<this>;

  interface: IPRouterStaticInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidityDualSyAndPtStatic: TypedContractMethod<
    [
      market: AddressLike,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netSyUsed: bigint;
        netPtUsed: bigint;
      }
    ],
    "view"
  >;

  addLiquidityDualTokenAndPtStatic: TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      netTokenDesired: BigNumberish,
      bulk: AddressLike,
      netPtDesired: BigNumberish
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netTokenUsed: bigint;
        netPtUsed: bigint;
        netSyUsed: bigint;
        netSyDesired: bigint;
      }
    ],
    "view"
  >;

  addLiquiditySinglePtStatic: TypedContractMethod<
    [market: AddressLike, netPtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netPtToSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyFromSwap: bigint;
      }
    ],
    "view"
  >;

  addLiquiditySingleSyKeepYtStatic: TypedContractMethod<
    [market: AddressLike, netSyIn: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netYtOut: bigint;
        netSyToPY: bigint;
      }
    ],
    "view"
  >;

  addLiquiditySingleSyStatic: TypedContractMethod<
    [market: AddressLike, netSyIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netPtFromSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyToSwap: bigint;
      }
    ],
    "view"
  >;

  addLiquiditySingleTokenKeepYtStatic: TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      netTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netYtOut: bigint;
        netSyMinted: bigint;
        netSyToPY: bigint;
      }
    ],
    "view"
  >;

  addLiquiditySingleTokenStatic: TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      netTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netPtFromSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyMinted: bigint;
        netSyToSwap: bigint;
      }
    ],
    "view"
  >;

  calcPriceImpactPY: TypedContractMethod<
    [market: AddressLike, netPtOut: BigNumberish],
    [bigint],
    "view"
  >;

  calcPriceImpactPt: TypedContractMethod<
    [market: AddressLike, netPtOut: BigNumberish],
    [bigint],
    "view"
  >;

  calcPriceImpactYt: TypedContractMethod<
    [market: AddressLike, netPtOut: BigNumberish],
    [bigint],
    "view"
  >;

  claimOwnership: TypedContractMethod<[], [void], "nonpayable">;

  facetAddress: TypedContractMethod<[selector: BytesLike], [string], "view">;

  getAmountTokenToMintSy: TypedContractMethod<
    [
      SY: AddressLike,
      tokenIn: AddressLike,
      bulk: AddressLike,
      netSyOut: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getBulkSellerFactory: TypedContractMethod<[], [string], "view">;

  getBulkSellerInfo: TypedContractMethod<
    [
      token: AddressLike,
      SY: AddressLike,
      netTokenIn: BigNumberish,
      netSyIn: BigNumberish
    ],
    [
      [string, bigint, bigint] & {
        bulk: string;
        totalToken: bigint;
        totalSy: bigint;
      }
    ],
    "view"
  >;

  getDefaultApproxParams: TypedContractMethod<
    [],
    [ApproxParamsStructOutput],
    "view"
  >;

  getLpToAssetRate: TypedContractMethod<
    [market: AddressLike],
    [bigint],
    "view"
  >;

  getLpToSyRate: TypedContractMethod<[market: AddressLike], [bigint], "view">;

  getMarketState: TypedContractMethod<
    [market: AddressLike],
    [
      [string, string, string, bigint, bigint, MarketStateStructOutput] & {
        pt: string;
        yt: string;
        sy: string;
        impliedYield: bigint;
        marketExchangeRateExcludeFee: bigint;
        state: MarketStateStructOutput;
      }
    ],
    "view"
  >;

  getOwnerAndPendingOwner: TypedContractMethod<
    [],
    [[string, string] & { _owner: string; _pendingOwner: string }],
    "view"
  >;

  getPY: TypedContractMethod<
    [py: AddressLike],
    [[string, string] & { pt: string; yt: string }],
    "view"
  >;

  getPtToAssetRate: TypedContractMethod<
    [market: AddressLike],
    [bigint],
    "view"
  >;

  getPtToSyRate: TypedContractMethod<[market: AddressLike], [bigint], "view">;

  getTokensInOut: TypedContractMethod<
    [token: AddressLike],
    [[string[], string[]] & { tokensIn: string[]; tokensOut: string[] }],
    "view"
  >;

  getTradeExchangeRateExcludeFee: TypedContractMethod<
    [market: AddressLike, state: MarketStateStruct],
    [bigint],
    "view"
  >;

  getTradeExchangeRateIncludeFee: TypedContractMethod<
    [market: AddressLike, netPtOut: BigNumberish],
    [bigint],
    "view"
  >;

  getUserMarketInfo: TypedContractMethod<
    [market: AddressLike, user: AddressLike],
    [IPActionInfoStatic.UserMarketInfoStructOutput],
    "nonpayable"
  >;

  getUserPYInfo: TypedContractMethod<
    [py: AddressLike, user: AddressLike],
    [IPActionInfoStatic.UserPYInfoStructOutput],
    "nonpayable"
  >;

  getUserSYInfo: TypedContractMethod<
    [sy: AddressLike, user: AddressLike],
    [IPActionInfoStatic.UserSYInfoStructOutput],
    "nonpayable"
  >;

  increaseLockPositionStatic: TypedContractMethod<
    [
      user: AddressLike,
      additionalAmountToLock: BigNumberish,
      newExpiry: BigNumberish
    ],
    [bigint],
    "view"
  >;

  mintPyFromSyStatic: TypedContractMethod<
    [YT: AddressLike, netSyToMint: BigNumberish],
    [bigint],
    "view"
  >;

  mintPyFromTokenStatic: TypedContractMethod<
    [
      YT: AddressLike,
      tokenIn: AddressLike,
      netTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [bigint],
    "view"
  >;

  mintSyFromTokenStatic: TypedContractMethod<
    [
      SY: AddressLike,
      tokenIn: AddressLike,
      netTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [bigint],
    "view"
  >;

  pyIndexCurrentViewMarket: TypedContractMethod<
    [market: AddressLike],
    [bigint],
    "view"
  >;

  pyIndexCurrentViewYt: TypedContractMethod<
    [yt: AddressLike],
    [bigint],
    "view"
  >;

  redeemPyToSyStatic: TypedContractMethod<
    [YT: AddressLike, netPYToRedeem: BigNumberish],
    [bigint],
    "view"
  >;

  redeemPyToTokenStatic: TypedContractMethod<
    [
      YT: AddressLike,
      netPYToRedeem: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [bigint],
    "view"
  >;

  redeemSyToTokenStatic: TypedContractMethod<
    [
      SY: AddressLike,
      tokenOut: AddressLike,
      netSyIn: BigNumberish,
      bulk: AddressLike
    ],
    [bigint],
    "view"
  >;

  removeLiquidityDualSyAndPtStatic: TypedContractMethod<
    [market: AddressLike, netLpToRemove: BigNumberish],
    [[bigint, bigint] & { netSyOut: bigint; netPtOut: bigint }],
    "view"
  >;

  removeLiquidityDualTokenAndPtStatic: TypedContractMethod<
    [
      market: AddressLike,
      netLpToRemove: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netPtOut: bigint;
        netSyToRedeem: bigint;
      }
    ],
    "view"
  >;

  removeLiquiditySinglePtStatic: TypedContractMethod<
    [market: AddressLike, netLpToRemove: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        netPtFromSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyFromBurn: bigint;
        netPtFromBurn: bigint;
      }
    ],
    "view"
  >;

  removeLiquiditySingleSyStatic: TypedContractMethod<
    [market: AddressLike, netLpToRemove: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netSyOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyFromBurn: bigint;
        netPtFromBurn: bigint;
        netSyFromSwap: bigint;
      }
    ],
    "view"
  >;

  removeLiquiditySingleTokenStatic: TypedContractMethod<
    [
      market: AddressLike,
      netLpToRemove: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyOut: bigint;
        netSyFromBurn: bigint;
        netPtFromBurn: bigint;
        netSyFromSwap: bigint;
      }
    ],
    "view"
  >;

  setBulkSellerFactory: TypedContractMethod<
    [_bulkSellerFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  setDefaultApproxParams: TypedContractMethod<
    [params: ApproxParamsStruct],
    [void],
    "nonpayable"
  >;

  setFacetForSelectors: TypedContractMethod<
    [arr: IPMiniDiamond.SelectorsToFacetStruct[]],
    [void],
    "nonpayable"
  >;

  swapExactPtForSyStatic: TypedContractMethod<
    [market: AddressLike, exactPtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netSyOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactPtForTokenStatic: TypedContractMethod<
    [
      market: AddressLike,
      exactPtIn: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyToRedeem: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactPtForYtStatic: TypedContractMethod<
    [market: AddressLike, exactPtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netYtOut: bigint;
        totalPtToSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactSyForPtStatic: TypedContractMethod<
    [market: AddressLike, exactSyIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactSyForYtStatic: TypedContractMethod<
    [market: AddressLike, exactSyIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netYtOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactTokenForPtStatic: TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      amountTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        netSyMinted: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactTokenForYtStatic: TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      amountTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netYtOut: bigint;
        netSyMinted: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactYtForPtStatic: TypedContractMethod<
    [market: AddressLike, exactYtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        totalPtSwapped: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapExactYtForSyStatic: TypedContractMethod<
    [market: AddressLike, exactYtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netSyOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyOwedInt: bigint;
        netPYToRepaySyOwedInt: bigint;
        netPYToRedeemSyOutInt: bigint;
      }
    ],
    "view"
  >;

  swapExactYtForTokenStatic: TypedContractMethod<
    [
      market: AddressLike,
      exactYtIn: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyOut: bigint;
        netSyOwedInt: bigint;
        netPYToRepaySyOwedInt: bigint;
        netPYToRedeemSyOutInt: bigint;
      }
    ],
    "view"
  >;

  swapPtForExactSyStatic: TypedContractMethod<
    [market: AddressLike, exactSyOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netPtIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapSyForExactPtStatic: TypedContractMethod<
    [market: AddressLike, exactPtOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netSyIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  swapSyForExactYtStatic: TypedContractMethod<
    [market: AddressLike, exactYtOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        netSyIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyReceivedInt: bigint;
        totalSyNeedInt: bigint;
      }
    ],
    "view"
  >;

  swapYtForExactSyStatic: TypedContractMethod<
    [market: AddressLike, exactSyOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netYtIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidityDualSyAndPtStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netSyUsed: bigint;
        netPtUsed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquidityDualTokenAndPtStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      netTokenDesired: BigNumberish,
      bulk: AddressLike,
      netPtDesired: BigNumberish
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netTokenUsed: bigint;
        netPtUsed: bigint;
        netSyUsed: bigint;
        netSyDesired: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySinglePtStatic"
  ): TypedContractMethod<
    [market: AddressLike, netPtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netPtToSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyFromSwap: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySingleSyKeepYtStatic"
  ): TypedContractMethod<
    [market: AddressLike, netSyIn: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netYtOut: bigint;
        netSyToPY: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySingleSyStatic"
  ): TypedContractMethod<
    [market: AddressLike, netSyIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netPtFromSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyToSwap: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySingleTokenKeepYtStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      netTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netYtOut: bigint;
        netSyMinted: bigint;
        netSyToPY: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquiditySingleTokenStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      netTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netLpOut: bigint;
        netPtFromSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyMinted: bigint;
        netSyToSwap: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calcPriceImpactPY"
  ): TypedContractMethod<
    [market: AddressLike, netPtOut: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calcPriceImpactPt"
  ): TypedContractMethod<
    [market: AddressLike, netPtOut: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calcPriceImpactYt"
  ): TypedContractMethod<
    [market: AddressLike, netPtOut: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "facetAddress"
  ): TypedContractMethod<[selector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAmountTokenToMintSy"
  ): TypedContractMethod<
    [
      SY: AddressLike,
      tokenIn: AddressLike,
      bulk: AddressLike,
      netSyOut: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBulkSellerFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBulkSellerInfo"
  ): TypedContractMethod<
    [
      token: AddressLike,
      SY: AddressLike,
      netTokenIn: BigNumberish,
      netSyIn: BigNumberish
    ],
    [
      [string, bigint, bigint] & {
        bulk: string;
        totalToken: bigint;
        totalSy: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDefaultApproxParams"
  ): TypedContractMethod<[], [ApproxParamsStructOutput], "view">;
  getFunction(
    nameOrSignature: "getLpToAssetRate"
  ): TypedContractMethod<[market: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLpToSyRate"
  ): TypedContractMethod<[market: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMarketState"
  ): TypedContractMethod<
    [market: AddressLike],
    [
      [string, string, string, bigint, bigint, MarketStateStructOutput] & {
        pt: string;
        yt: string;
        sy: string;
        impliedYield: bigint;
        marketExchangeRateExcludeFee: bigint;
        state: MarketStateStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerAndPendingOwner"
  ): TypedContractMethod<
    [],
    [[string, string] & { _owner: string; _pendingOwner: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPY"
  ): TypedContractMethod<
    [py: AddressLike],
    [[string, string] & { pt: string; yt: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPtToAssetRate"
  ): TypedContractMethod<[market: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPtToSyRate"
  ): TypedContractMethod<[market: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokensInOut"
  ): TypedContractMethod<
    [token: AddressLike],
    [[string[], string[]] & { tokensIn: string[]; tokensOut: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTradeExchangeRateExcludeFee"
  ): TypedContractMethod<
    [market: AddressLike, state: MarketStateStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTradeExchangeRateIncludeFee"
  ): TypedContractMethod<
    [market: AddressLike, netPtOut: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserMarketInfo"
  ): TypedContractMethod<
    [market: AddressLike, user: AddressLike],
    [IPActionInfoStatic.UserMarketInfoStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getUserPYInfo"
  ): TypedContractMethod<
    [py: AddressLike, user: AddressLike],
    [IPActionInfoStatic.UserPYInfoStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getUserSYInfo"
  ): TypedContractMethod<
    [sy: AddressLike, user: AddressLike],
    [IPActionInfoStatic.UserSYInfoStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseLockPositionStatic"
  ): TypedContractMethod<
    [
      user: AddressLike,
      additionalAmountToLock: BigNumberish,
      newExpiry: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintPyFromSyStatic"
  ): TypedContractMethod<
    [YT: AddressLike, netSyToMint: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintPyFromTokenStatic"
  ): TypedContractMethod<
    [
      YT: AddressLike,
      tokenIn: AddressLike,
      netTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintSyFromTokenStatic"
  ): TypedContractMethod<
    [
      SY: AddressLike,
      tokenIn: AddressLike,
      netTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pyIndexCurrentViewMarket"
  ): TypedContractMethod<[market: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pyIndexCurrentViewYt"
  ): TypedContractMethod<[yt: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeemPyToSyStatic"
  ): TypedContractMethod<
    [YT: AddressLike, netPYToRedeem: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "redeemPyToTokenStatic"
  ): TypedContractMethod<
    [
      YT: AddressLike,
      netPYToRedeem: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "redeemSyToTokenStatic"
  ): TypedContractMethod<
    [
      SY: AddressLike,
      tokenOut: AddressLike,
      netSyIn: BigNumberish,
      bulk: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityDualSyAndPtStatic"
  ): TypedContractMethod<
    [market: AddressLike, netLpToRemove: BigNumberish],
    [[bigint, bigint] & { netSyOut: bigint; netPtOut: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityDualTokenAndPtStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      netLpToRemove: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netPtOut: bigint;
        netSyToRedeem: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquiditySinglePtStatic"
  ): TypedContractMethod<
    [market: AddressLike, netLpToRemove: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        netPtFromSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyFromBurn: bigint;
        netPtFromBurn: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquiditySingleSyStatic"
  ): TypedContractMethod<
    [market: AddressLike, netLpToRemove: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netSyOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyFromBurn: bigint;
        netPtFromBurn: bigint;
        netSyFromSwap: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquiditySingleTokenStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      netLpToRemove: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyOut: bigint;
        netSyFromBurn: bigint;
        netPtFromBurn: bigint;
        netSyFromSwap: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setBulkSellerFactory"
  ): TypedContractMethod<
    [_bulkSellerFactory: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultApproxParams"
  ): TypedContractMethod<[params: ApproxParamsStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFacetForSelectors"
  ): TypedContractMethod<
    [arr: IPMiniDiamond.SelectorsToFacetStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactPtForSyStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactPtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netSyOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactPtForTokenStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      exactPtIn: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyToRedeem: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactPtForYtStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactPtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netYtOut: bigint;
        totalPtToSwap: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactSyForPtStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactSyIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactSyForYtStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactSyIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netYtOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactTokenForPtStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      amountTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        netSyMinted: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactTokenForYtStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      tokenIn: AddressLike,
      amountTokenIn: BigNumberish,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netYtOut: bigint;
        netSyMinted: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactYtForPtStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactYtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        netPtOut: bigint;
        totalPtSwapped: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactYtForSyStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactYtIn: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netSyOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyOwedInt: bigint;
        netPYToRepaySyOwedInt: bigint;
        netPYToRedeemSyOutInt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactYtForTokenStatic"
  ): TypedContractMethod<
    [
      market: AddressLike,
      exactYtIn: BigNumberish,
      tokenOut: AddressLike,
      bulk: AddressLike
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyOut: bigint;
        netSyOwedInt: bigint;
        netPYToRepaySyOwedInt: bigint;
        netPYToRedeemSyOutInt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapPtForExactSyStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactSyOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netPtIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapSyForExactPtStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactPtOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netSyIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapSyForExactYtStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactYtOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        netSyIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
        netSyReceivedInt: bigint;
        totalSyNeedInt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapYtForExactSyStatic"
  ): TypedContractMethod<
    [market: AddressLike, exactSyOut: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        netYtIn: bigint;
        netSyFee: bigint;
        priceImpact: bigint;
        exchangeRateAfter: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
