/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPExternalRewardDistributor {
  export type MarketRewardDataStruct = {
    rewardPerSec: BigNumberish;
    accumulatedReward: BigNumberish;
    lastUpdated: BigNumberish;
    incentiveEndsAt: BigNumberish;
  };

  export type MarketRewardDataStructOutput = [
    rewardPerSec: bigint,
    accumulatedReward: bigint,
    lastUpdated: bigint,
    incentiveEndsAt: bigint
  ] & {
    rewardPerSec: bigint;
    accumulatedReward: bigint;
    lastUpdated: bigint;
    incentiveEndsAt: bigint;
  };
}

export interface IPExternalRewardDistributorInterface extends Interface {
  getFunction(
    nameOrSignature: "getRewardTokens" | "redeemRewards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AddRewardToMarket" | "DistributeReward"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getRewardTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemRewards",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemRewards",
    data: BytesLike
  ): Result;
}

export namespace AddRewardToMarketEvent {
  export type InputTuple = [
    market: AddressLike,
    token: AddressLike,
    data: IPExternalRewardDistributor.MarketRewardDataStruct
  ];
  export type OutputTuple = [
    market: string,
    token: string,
    data: IPExternalRewardDistributor.MarketRewardDataStructOutput
  ];
  export interface OutputObject {
    market: string;
    token: string;
    data: IPExternalRewardDistributor.MarketRewardDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributeRewardEvent {
  export type InputTuple = [
    market: AddressLike,
    rewardToken: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    rewardToken: string,
    amount: bigint
  ];
  export interface OutputObject {
    market: string;
    rewardToken: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPExternalRewardDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): IPExternalRewardDistributor;
  waitForDeployment(): Promise<this>;

  interface: IPExternalRewardDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRewardTokens: TypedContractMethod<
    [market: AddressLike],
    [string[]],
    "view"
  >;

  redeemRewards: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRewardTokens"
  ): TypedContractMethod<[market: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "redeemRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AddRewardToMarket"
  ): TypedContractEvent<
    AddRewardToMarketEvent.InputTuple,
    AddRewardToMarketEvent.OutputTuple,
    AddRewardToMarketEvent.OutputObject
  >;
  getEvent(
    key: "DistributeReward"
  ): TypedContractEvent<
    DistributeRewardEvent.InputTuple,
    DistributeRewardEvent.OutputTuple,
    DistributeRewardEvent.OutputObject
  >;

  filters: {
    "AddRewardToMarket(address,address,tuple)": TypedContractEvent<
      AddRewardToMarketEvent.InputTuple,
      AddRewardToMarketEvent.OutputTuple,
      AddRewardToMarketEvent.OutputObject
    >;
    AddRewardToMarket: TypedContractEvent<
      AddRewardToMarketEvent.InputTuple,
      AddRewardToMarketEvent.OutputTuple,
      AddRewardToMarketEvent.OutputObject
    >;

    "DistributeReward(address,address,uint256)": TypedContractEvent<
      DistributeRewardEvent.InputTuple,
      DistributeRewardEvent.OutputTuple,
      DistributeRewardEvent.OutputObject
    >;
    DistributeReward: TypedContractEvent<
      DistributeRewardEvent.InputTuple,
      DistributeRewardEvent.OutputTuple,
      DistributeRewardEvent.OutputObject
    >;
  };
}
