/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IPPtOracleInterface extends Interface {
  getFunction(
    nameOrSignature: "getOracleState" | "getPtToAssetRate"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SetBlockCycleNumerator"): EventFragment;

  encodeFunctionData(
    functionFragment: "getOracleState",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPtToAssetRate",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getOracleState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPtToAssetRate",
    data: BytesLike
  ): Result;
}

export namespace SetBlockCycleNumeratorEvent {
  export type InputTuple = [newBlockCycleNumerator: BigNumberish];
  export type OutputTuple = [newBlockCycleNumerator: bigint];
  export interface OutputObject {
    newBlockCycleNumerator: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPPtOracle extends BaseContract {
  connect(runner?: ContractRunner | null): IPPtOracle;
  waitForDeployment(): Promise<this>;

  interface: IPPtOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getOracleState: TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [
      [boolean, bigint, boolean] & {
        increaseCardinalityRequired: boolean;
        cardinalityRequired: bigint;
        oldestObservationSatisfied: boolean;
      }
    ],
    "view"
  >;

  getPtToAssetRate: TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getOracleState"
  ): TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [
      [boolean, bigint, boolean] & {
        increaseCardinalityRequired: boolean;
        cardinalityRequired: bigint;
        oldestObservationSatisfied: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPtToAssetRate"
  ): TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "SetBlockCycleNumerator"
  ): TypedContractEvent<
    SetBlockCycleNumeratorEvent.InputTuple,
    SetBlockCycleNumeratorEvent.OutputTuple,
    SetBlockCycleNumeratorEvent.OutputObject
  >;

  filters: {
    "SetBlockCycleNumerator(uint16)": TypedContractEvent<
      SetBlockCycleNumeratorEvent.InputTuple,
      SetBlockCycleNumeratorEvent.OutputTuple,
      SetBlockCycleNumeratorEvent.OutputObject
    >;
    SetBlockCycleNumerator: TypedContractEvent<
      SetBlockCycleNumeratorEvent.InputTuple,
      SetBlockCycleNumeratorEvent.OutputTuple,
      SetBlockCycleNumeratorEvent.OutputObject
    >;
  };
}
